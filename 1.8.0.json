{"meta":{"generator":"0.9.0","format":20,"date":1618286762651},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"","path":"docs/general/welcome.md"}}},"built in handlers":{"name":"Built In Handlers","files":{"discord":{"name":"Discord Commands","type":"md","content":"# Built-in discord commands\n\nCorncierge comes with a lot of built-in commands that should be useful to most bots.\nAny and all of these commands can be disabled via [ApplicationOptions.discord](/#/docs/corncierge/master/typedef/DiscordOptions):\n\n```js\n// Disable the music commands and the random number command\nnew Application({ discord: { disabledCommands: ['music', 'random'] }});\n```\n\n## Traditional Commands\n\nThese commands are message based commands that will be supported until slash commands are fully fleshed out and support proper gating of usage. All of these commands are prefixed by the prefix for the guild, the default is `!`, and can be changed using the `prefix` command.\n\n### Gaming\n\n* `random`: generates a random number between 0 and the specified number\n* `room`: an orginizational system for members with waiting rooms and player lists\n  * this command is quite complex and is better described in the client by the slash command equivalent\n\n### General\n\n* `help`: A help command that handles help information for most built-in commands\n  * you may want to override this with your own help command to add your own commands\n  * `help legacy` will list your custom commands as well however\n\n### Management\n\nThese are commands that essentially act as the console for the bot, most are locked to the `console` channel.\n\n* `eval`: runs the code specified using eval, the nodejs util and the discord.js client are imported for use, locked to the `owner` user\n* `reboot`: cleanly reboots the bot\n* `reload`: reloads the cache, i.e. everything in the database\n* `setstatus`: sets the bots discord status, at this time it cannot be fully custom\n* `status`: sends a message with the current status of the bot\n* `update`: executes `git pull` and then `npm install` on the command line to update the bot, automatically restarts to apply changes, locked to the `owner` user\n\n### Moderation\n\nAll of the commands in this category require the same permission as if you were to perform the actions manually\n\n* `clear`: clears the last n lines as specified, cannot delete messages that are older than 2 weeks\n* `moveall`: moves all users in a voice channel to another voice channel, can specify both starting and ending channel\n  * `moveall general` moves everyone in your current voice channel or `moveall general -> general2`\n* `muteall`: mutes everyone in the current voice channel aside for the caller and bots, automatically unmutes after the specified time (15 seconds by default)\n* `prefix`: changes the prefix in the current guild to whatever is specified\n* `randommove`: randomly moves the number of people specified using the same syntax as `moveall`\n* `unmuteall`: unmutes everyone in the current voice channel, useful after `muteall 0`\n\n### Music\n\nMost of these commands should be familiar from other music bots. The commands marked with `DJ` require a role named `DJ` to use unless you have `MANAGE_ROLES`.\n\n* `leave`: makes the bot leave the current channel `DJ`\n* `loop`: loops the currently playing song the number of times specified `DJ`\n* `nowplaying`: displays the currently playing song\n* `pause`: pauses the currently playing song\n* `play`: starts or adds to the queue of songs, can only play youtube!\n* `queue`: displays the current queue\n* `remove`: removes the song number specified from the queue `DJ`\n* `resume`: resumes the currently playing song after using `pause`\n* `shuffle`: shuffles the current queue `DJ`\n* `skip`: skips the current playing song `DJ`\n* `skipall`: clears the current queue, does NOT skip the current playing song `DJ`\n* `skipto`: skips the queue to the spot in the queue specified `DJ`\n* `volume`: sets the volume to the value specified `DJ`\n\n### Roles\n\nThere are lots of different ways to manage roles, the default commands allow you a couple different methods. To use any of the managers, you need to have `MANAGE_ROLES`.\n\n* `autorole`: set up a role to automatically be assigned to new members, can be after a specified wait period `manager`\n* `color`: assings the caller a color (role) if it has been set up in the colormanager, functionality is better using slash commands\n* `colormanager`: sets up roles and channel for the `color` command `manager`\n* `makeme`: assigns the caller any role based on the name if it has been set up in rolemanager\n* `makemenot`: removes any role from the caller based on the name if it has been set up in rolemanager\n* `reactionroles`: sets up role assignment via reactions `manager`\n* `rolemanager`: sets up a database of roles and channels that each role can be self assigned in `manager`\n* `voiceroles`: sets up up to 5 sets of channels that each have a unique voice role associated `manager`\n\n### Twitch\n\nThese commands are for interfacing with the built in twitch IRC bot. Locked to a command management channel.\n\n* `commandlist`: lists all the currently registerd twitch commands\n* `commands`: allows creating, editing, and removing twitch commands\n* `variables`: allows creating, editing, and removing custom twitch replaceable variables\n\n## Slash Commands\n\nThese commands are mostly self explanatory as they display the information in the client. However, you do need to take some extra steps to tell discord about these commands. These commands are not disabled by the `disabledCommands` parameter since they have to be manually registered.\n\n* `/color`: assigns a color that was set up in color manager\n* `/room`: an orginizational system for members with waiting rooms and player lists\n\n### Registering Slash Commands\n\nBecause of the unique nature of slash commands, they can be registered per guild or globally. Corncierge provides some helper methods to register commands for you. This is best done using the `eval` command.\n\n```js\n// Adding all registered slash commands (yes including custom ones), globally\n// Commands with guilds specified will not be registered globally\n!eval socket.registerCommands();\n\n// Adding all registered slash commands, to a specific guild\n// Checks to see if the commands are registered globally first\n// Commands with guilds specified that are not this guild will not get registered to it\n!eval socket.registerCommands(':guildid');\n\n// Adding a single registered slash command, by name\n// The command will be registered globally if guilds is not specified in the command data\n// If guilds is specified in the registration info, it will register to every guild listed\n!eval socket.registerCommand('commandname');\n```\n\n`socket` in the above code refers to the [DiscordManager](/#/docs/corncierge/master/class/DiscordManager). You can find more information about these methods there. It can be accessed as `Application#discord`.","path":"docs/handlers/discord.md"},"twitch":{"name":"Twitch IRC Commands","type":"md","content":"# Built-in twitch command handlers\n\nCorncierge comes with a few built-in command responders that should be useful to most bots.\nIt is your choice whether to use these responders depending on the method column in the database.\n\nFor twitch commands, if the responder fails in any way or takes to long, it will respond with the output in the database.\n\n## Utility Commands\n\n* `followage`: returns how long the caller or specified user has been following the channel, if they are not following this falls back to the database response\n* `uptime`: returns how long the stream has been up for\n* `variable`: allows creating, editing, and deleteing custom variables\n\n## Other Commands\n\n* `joke`: says a random joke from the database\n\n## Setting up built-in commands\n\nThere are two ways to use these (and custom created) functions in your twitch command.\n\n1. Modify the database directly and set the `method` column for the command to one of the above names.\n2. Use `!commands link commandname uptime` to link the command to the function in discord.\n\n## Automatic replacement variables\n\nThere are 4 variables in command responses that are automatically replaced. These variables are identified by wrapping them in `{}`.\nE.g. `{caster}` will be replaced with the broadcasters name.\n\nBuilt-in replacements:\n* `{user}` - the user that executed the command\n* `{touser}` - the first parameter passed to the command, or the user that executed the command if there is no first parameter\n* `{count}` - the number of times the command has been called\n* `{caster}` - the broadcaster in the channel the command was executed in\n\nCustom variables (up to 25 per channel):\n* `{var-<somevarname>}` - replaced with a custom value set via discord or irc","path":"docs/handlers/twitch.md"},"http":{"name":"HTTP Requests","type":"md","content":"# Built-in HTTP request handlers\n\nCorncierge comes with a few built-in request handlers that deal with other noteable features.\n\nThe built in request handlers do not respond with any data as they are meant to be an API.\n\n## Streaming Requests\n\nThese paths are all prefixed by `/streaming`\n\n* `/streamstart`: when sent the correct data, will trigger a discord notification as set up in the database\n* `/streamstop`: when sent the correct data, will trigger a discord message edit as set up in the database\n","path":"docs/handlers/http.md"}}},"adding handlers":{"name":"Adding Handlers","files":{"discord":{"name":"Discord Commands","type":"js","content":"'use strict';\n\n/**\n * A way to add commands to the bot\n */\n\n// Import the necessary elements\nconst { Application, BaseCommand, BaseAppCommand } = require('corncierge');\n\n// Create an instance of the application, make sure to provide actual config options or this will fail\nconst app = new Application();\n\n// Traditional text based command: test\n// Create the structure of your command\nclass TestCommand extends BaseCommand {\n  constructor(socket) {\n    // Define the parameters of the command\n    const commandDescriptor = {\n      name: 'test',\n      aliases: ['t'],\n      description: 'a basic test command',\n    };\n    super(socket, commandDescriptor);\n  }\n\n  // The function that is called when the commandis run\n  run(message, args) {\n    // Use this.socket if you need to talk to the DiscordManager\n    this.socket.app.log(module, 'Test command used!');\n    message.channel.send(`That's a test....${args ? `with some args: ${args}` : ''}`);\n  }\n}\n\n// Let the app know about your command\napp.discord.commandManager.register(TestCommand);\n\n// If you have a lot of commands you can register them all at once\nconst commands = [];\ncommands.push(TestCommand);\n// If you register two commands with the same name (or register the same command twice) it overwrites the existing one\n// If you do not disable a built in command with the same name, it will overwrite it!\napp.discord.commandManager.registerGroup(commands, 'custom');\n\n// Discord Slash Command: test\n// Create the structure of your command\nclass TestApplicationCommand extends BaseAppCommand {\n  constructor(socket) {\n    // Define the parameters of the command\n    const commandDescriptor = {\n      definition: {\n        name: 'test',\n        description: 'A testing command',\n        options: [\n          {\n            type: 3,\n            name: 'string',\n            description: 'a string option',\n          },\n        ],\n      },\n    };\n    super(socket, commandDescriptor);\n  }\n\n  // The function that is called when the interaction is recieved\n  run(interaction, args) {\n    interaction.reply(`That's an interaction test....${args ? `with some args: ${args}` : ''}`, { ephemeral: true });\n  }\n}\n\n// Let the app know about your command\napp.discord.interactionManager.register(TestApplicationCommand, 'applicationCommands');\n\n// If you have a lot of commands you can register them all at once\nconst applicationCommands = [];\napplicationCommands.push(TestApplicationCommand);\n// If you register two commands with the same name (or register the same command twice) it overwrites the existing one\n// Built-in commands will be overwritten in this instance!\napp.discord.interactionManager.registerMultiple(applicationCommands, 'applicationCommands');\n\n// Start the app\napp.boot();\n","path":"docs/handlers/discord.js"},"twitch":{"name":"Twitch IRC Commands","type":"js","content":"'use strict';\n\n/**\n * A way to add twitch command responders to the bot\n */\n\n// Import the necessary elements\nconst { Application, TwitchCommand } = require('corncierge');\n\n// Create an instance of the application, make sure to provide actual config options or this will fail\nconst app = new Application();\n\n// Create the structure of your responder\nclass TestTwitchCommand extends TwitchCommand {\n  constructor(socket) {\n    // Define the parameters of the command\n    const commandDescriptor = {\n      name: 'test',\n    };\n    super(socket, commandDescriptor);\n  }\n\n  // The function that is called when the command responder is run\n  run(handler, hasArgs) {\n    this.socket.app.log(module, 'Test twitch command used!');\n    handler.respond(`Whoa, nice useage of the command${hasArgs ? ', I see you are a mod and can use arguments!' : '.'}`);\n  }\n}\n\n// Let the app know about your command responder\napp.twitch.irc.commandResponders.register(TestTwitchCommand);\n\n// If you register two command responders with the same name (or register the same responder twice) it overwrites the existing one\n\n// Start the app\napp.boot();\n","path":"docs/handlers/twitch.js"},"http":{"name":"HTTP Requests","type":"js","content":"'use strict';\n\n/**\n * A way to add http request handlers to the bot\n */\n\n// Import the necessary elements\nconst { Application, BaseRequest } = require('corncierge');\n\n// Create an instance of the application, make sure to provide actual config options or this will fail\nconst app = new Application();\n\n// Create the structure of your request handler\nclass HelloWorldRequest extends BaseRequest {\n  constructor(socket) {\n    // Define the parameters of the command\n    const requestDescriptor = {\n      name: 'helloworld',\n      methods: ['GET'],\n      description: 'a simple webpage that displays Hello World',\n      responds: true,\n    };\n    super(socket, requestDescriptor);\n  }\n\n  // The function that is called when the webpage (/helloworld in this case) is called\n  // There is a 4th parameter which contains the data set with the request if any, for POST, PUT, etc...\n  run(method, url, headers) {\n    // Use this.socket if you need to talk to the HTTPManager\n    this.socket.app.log(module, `Hellow world page served from request with headers: ${headers}`);\n    return {\n      // You determine your own status code, and it must be set\n      statusCode: 200,\n      // This data is sent to Buffer.from()\n      data: '<h1>Hello World!</h1>',\n    };\n  }\n}\n\n// Let the app know about your command responder\n// This is accessible at http://domain.com/helloworld\napp.http.requestsManager.register(HelloWorldRequest);\n\n// Change the path before /helloworld\n// This is accessible at http://domain.com/examples/helloworld\napp.http.requestsManager.register(HelloWorldRequest, '/examples/');\n\n// Register multiple request handlers at once to a path\n// This is accessible at http://domain.com/examples/basic/helloworld\n// Note there are no slashes before and after the group name\napp.http.requestsManager.registerGroup([HelloWorldRequest], 'examples/basic');\n\n// If you register two request handlers with the same path (or register the same handler twice) it overwrites the existing one\n// The same request handlers with different paths will not overwrite!\n\n// Start the app\napp.boot();\n","path":"docs/handlers/http.js"}}}},"classes":[{"name":"Application","description":"The application container.","access":"public","construct":{"name":"Application","description":"Create a new application instance.","params":[{"name":"options","description":"the options for the application","optional":true,"type":[[["ApplicationOptions"]]]}]},"props":[{"name":"debug","description":"Whether the application is in debug mode.","access":"private","type":[[["boolean"]]],"meta":{"line":33,"file":"Application.js","path":"app"}},{"name":"twitch","description":"The Twitch manager for the application.","type":[[["TwitchManager"]]],"meta":{"line":40,"file":"Application.js","path":"app"}},{"name":"logger","description":"The log manager for the application.","access":"private","type":[[["LogManager"]]],"meta":{"line":48,"file":"Application.js","path":"app"}},{"name":"settings","description":"The settings for the application, mapped by name.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":54,"file":"Application.js","path":"app"}},{"name":"streaming","description":"The streaming settings for the application, mapped by name.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":60,"file":"Application.js","path":"app"}},{"name":"discord","description":"The Discord manager for the application.","type":[[["DiscordManager"]]],"meta":{"line":67,"file":"Application.js","path":"app"}},{"name":"http","description":"The HTTP Server manager for the application.","type":[[["HTTPManager"]]],"meta":{"line":75,"file":"Application.js","path":"app"}},{"name":"database","description":"The database manager for the application.","type":[[["DatabaseManager"]]],"meta":{"line":82,"file":"Application.js","path":"app"}},{"name":"eventLogger","description":"The event log emitter that emits structured responses for events that log to discord (not debug logs)","type":[[["EventLogger"]]],"meta":{"line":88,"file":"Application.js","path":"app"}},{"name":"ending","description":"True when intentionally ending the application so subapplications do not restart","access":"private","type":[[["boolean"]]],"meta":{"line":95,"file":"Application.js","path":"app"}},{"name":"log","description":"Logging shortcut. Logs to `info` by default. Other levels are properties.","readonly":true,"type":[[["Logging"]]],"meta":{"line":103,"file":"Application.js","path":"app"}}],"methods":[{"name":"boot","description":"Boot the application.","access":"public","async":true,"meta":{"line":111,"file":"Application.js","path":"app"}},{"name":"setOptions","description":"Validate and set the configuration options for the application.","access":"private","params":[{"name":"options","description":"the options to validate","type":[[["Object"]]]}],"meta":{"line":182,"file":"Application.js","path":"app"}},{"name":"formatOptions","description":"Formats options in a useable format for the application","access":"private","params":[{"name":"options","description":"the pre validated options","type":[[["Object"]]]}],"returns":{"types":[[["Object"]]],"description":"formatted options"},"meta":{"line":299,"file":"Application.js","path":"app"}},{"name":"setSettings","description":"Cache all database settings for the application.","access":"private","returns":[[["Promise"]]],"meta":{"line":367,"file":"Application.js","path":"app"}},{"name":"setStreaming","description":"Cache all database streaming settings for the application.","access":"private","returns":[[["Promise"]]],"meta":{"line":382,"file":"Application.js","path":"app"}}],"meta":{"line":19,"file":"Application.js","path":"app"}},{"name":"BaseTable","description":"Represents API methods for any database table","abstract":true,"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":7,"file":"BaseTable.js","path":"app/database/tables"}},{"name":"botLogTable","description":"Contains API methods for the botLog database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"add","description":"Add a bot-initiated log entry.","params":[{"name":"values","description":"extra parameters to pass to the query","variable":true,"type":[["*"]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":15,"file":"botLog.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"botLog.js","path":"app/database/tables"}},{"name":"colorManagerTable","description":"Contains API methods for the colorManager database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get color manager settings.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"colorManager.js","path":"app/database/tables"}},{"name":"add","description":"Add a guild to the colormanager","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"colorManager.js","path":"app/database/tables"}},{"name":"delete","description":"Removes a guild from the colormanager","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"colorManager.js","path":"app/database/tables"}},{"name":"edit","description":"Edit the color manager for a guild","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"roles","description":"an object with a channel id associated with an array of role names","type":[[["Object"]]]},{"name":"snowflakes","description":"an array containing all the snowflakes for the color roles","type":[[["Array","<"],["string",">"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":43,"file":"colorManager.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"colorManager.js","path":"app/database/tables"}},{"name":"humanLogTable","description":"Contains API methods for the humanLog database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"add","description":"Add a human-initiated log entry.","params":[{"name":"values","description":"extra parameters to pass to the query","variable":true,"type":[["*"]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":15,"file":"humanLog.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"humanLog.js","path":"app/database/tables"}},{"name":"ircCommandsTable","description":"Contains API methods for the ircCommands database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get all IRC commands.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"ircCommands.js","path":"app/database/tables"}},{"name":"add","description":"Add an IRC command.","params":[{"name":"input","description":"what the command responds to","type":[[["string"]]]},{"name":"output","description":"what to display as an output when the command is fired","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":26,"file":"ircCommands.js","path":"app/database/tables"}},{"name":"delete","description":"Delete an IRC command.","params":[{"name":"id","description":"the id of the command to delete","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":38,"file":"ircCommands.js","path":"app/database/tables"}},{"name":"edit","description":"Edits an IRC command.","params":[{"name":"property","description":"the property of the command to edit","type":[[["IRCCommandEditProperty"]]]},{"name":"id","description":"the id of the command to update","type":[[["number"]]]},{"name":"updated","description":"the new value for the parameter","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":58,"file":"ircCommands.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"ircCommands.js","path":"app/database/tables"}},{"name":"ircFiltersTable","description":"Contains API methods for the ircFilters database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get all IRC moderation filters.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"ircFilters.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"ircFilters.js","path":"app/database/tables"}},{"name":"ircVariablesTable","description":"Contains API methods for the ircVariables database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get all IRC variables.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"ircVariables.js","path":"app/database/tables"}},{"name":"add","description":"Add an IRC variable.","params":[{"name":"name","description":"what the variable is named","type":[[["string"]]]},{"name":"channel","description":"the channel to which this variable applies","type":[[["string"]]]},{"name":"value","description":"the value to replace this variable with in commands","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":25,"file":"ircVariables.js","path":"app/database/tables"}},{"name":"delete","description":"Delete an IRC variable.","params":[{"name":"id","description":"the id of the variable to delete","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":34,"file":"ircVariables.js","path":"app/database/tables"}},{"name":"edit","description":"Edits an IRC variable.","params":[{"name":"id","description":"the id of the variable to update","type":[[["number"]]]},{"name":"updated","description":"the new value for the variable","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":44,"file":"ircVariables.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"ircVariables.js","path":"app/database/tables"}},{"name":"jokesTable","description":"Contains API methods for the jokes database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get all jokes.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"jokes.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"jokes.js","path":"app/database/tables"}},{"name":"newMemberRoleTable","description":"Contains API methods for the newMemberRole database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get New member role settings.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"newMemberRole.js","path":"app/database/tables"}},{"name":"add","description":"Add a new member role setting","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"newMemberRole.js","path":"app/database/tables"}},{"name":"delete","description":"Removes a new member role setting","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"newMemberRole.js","path":"app/database/tables"}},{"name":"edit","description":"Updates a new member role setting","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"roleID","description":"the id of the role that is assigned","type":[[["string"]]]},{"name":"delayTime","description":"the delay time in milliseconds before the role is added","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":43,"file":"newMemberRole.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"newMemberRole.js","path":"app/database/tables"}},{"name":"prefixesTable","description":"Contains API methods for the prefixes database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get prefixes.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"prefixes.js","path":"app/database/tables"}},{"name":"add","description":"Add a guild to prefixes","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"prefixes.js","path":"app/database/tables"}},{"name":"delete","description":"Remove a guild from prefixes","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"prefixes.js","path":"app/database/tables"}},{"name":"edit","description":"Edit the prefix for a guild","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"prefix","description":"the new prefix to use","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":42,"file":"prefixes.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"prefixes.js","path":"app/database/tables"}},{"name":"randomChannelsTable","description":"Contains API methods for the randomChannels database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get random channel data.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"randomChannels.js","path":"app/database/tables"}},{"name":"add","description":"Add a guild to random channels","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":{"types":[[["Promise"]]],"description":"<void>"},"meta":{"line":23,"file":"randomChannels.js","path":"app/database/tables"}},{"name":"delete","description":"Remove a guild from random channels","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"randomChannels.js","path":"app/database/tables"}},{"name":"edit","description":"Edit the random channels for a guild","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"toChannel","description":"the snowflake id of the stored destinaton channel","type":[[["string"]]]},{"name":"fromChannel","description":"the snowflake id of the stored source channel","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":43,"file":"randomChannels.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"randomChannels.js","path":"app/database/tables"}},{"name":"reactionRolesTable","description":"Contains API methods for the reactionRoles database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get reaction manager settings.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"reactionRoles.js","path":"app/database/tables"}},{"name":"add","description":"Add a guild to the reactionmanager","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"reactionRoles.js","path":"app/database/tables"}},{"name":"delete","description":"Removes a guild from the reactionmanager","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"reactionRoles.js","path":"app/database/tables"}},{"name":"edit","description":"Edit the reaction role manager for a guild","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"channelID","description":"the stored snowflake of the channel where the reaction message is","type":[[["string"]]]},{"name":"messageID","description":"the store snowflake of the message that is reacted to","type":[[["string"]]]},{"name":"roles","description":"an object containing key value pairs of emote snowflakes and an array of role snowflakes","type":[[["Object"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":44,"file":"reactionRoles.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"reactionRoles.js","path":"app/database/tables"}},{"name":"roleManagerTable","description":"Contains API methods for the roleManager database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get role manager settings.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"roleManager.js","path":"app/database/tables"}},{"name":"add","description":"Add a guild to the rolemanager","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"roleManager.js","path":"app/database/tables"}},{"name":"delete","description":"Removes a guild from the rolemanager","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"roleManager.js","path":"app/database/tables"}},{"name":"edit","description":"Edit the role manager for a guild","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"addRoles","description":"an object containing key value pairs of channel snowflakes and an array of role snowflakes","type":[[["Object"]]]},{"name":"removeRoles","description":"an object containing key value pairs of channel snowflakes and an array of role snowflakes","type":[[["Object"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":43,"file":"roleManager.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"roleManager.js","path":"app/database/tables"}},{"name":"roomsTable","description":"Contains API methods for the rooms database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get rooms.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"rooms.js","path":"app/database/tables"}},{"name":"add","description":"Add a room to the room manager","params":[{"name":"id","description":"the room id (guildID-room) to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"rooms.js","path":"app/database/tables"}},{"name":"delete","description":"Remove a room from the room manager","params":[{"name":"id","description":"the room id (guildID-room) to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"rooms.js","path":"app/database/tables"}},{"name":"edit","description":"Edit a room","params":[{"name":"id","description":"the room id (guildID-room) to edit in the database","type":[[["string"]]]},{"name":"data","description":"the updated data for the room","type":[[["RoomData"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":56,"file":"rooms.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"rooms.js","path":"app/database/tables"}},{"name":"settingsTable","description":"Contains API methods for the settings database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get all settings","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"settings.js","path":"app/database/tables"}},{"name":"add","description":"Add a setting","params":[{"name":"name","description":"the name of the setting to add","type":[[["string"]]]},{"name":"value","description":"the value of the new setting","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":24,"file":"settings.js","path":"app/database/tables"}},{"name":"edit","description":"Edit a setting","params":[{"name":"name","description":"the name of the setting to edit","type":[[["string"]]]},{"name":"value","description":"the new value for the setting","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":34,"file":"settings.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"settings.js","path":"app/database/tables"}},{"name":"streamingTable","description":"Contains API methods for the streaming database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get streaming settings","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"streaming.js","path":"app/database/tables"}},{"name":"edit","description":"Update streaming last mesage","params":[{"name":"key","description":"the stream user to edit","type":[[["string"]]]},{"name":"messageID","description":"the snowflake of the last go live message","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":24,"file":"streaming.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"streaming.js","path":"app/database/tables"}},{"name":"TableManager","description":"Stores the tables for a database","props":[{"name":"socket","description":"The database manager that handles these tables","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":10,"file":"TableManager.js","path":"app/database/tables"}},{"name":"[TableName]","description":"Stores the registered table associated with TableName","type":[[["BaseTable"]]],"meta":{"line":18,"file":"TableManager.js","path":"app/database/tables"}},{"name":"discord","description":"An array of database tables, all of which deal with discord, are mapped by guildID, and are cached normally","type":[[["Array","<"],["BaseTable",">"]]],"meta":{"line":28,"file":"TableManager.js","path":"app/database/tables"}}],"methods":[{"name":"register","description":"Registers a table in the manager for use throughout the application","params":[{"name":"table","description":"the table to register","type":[[["BaseTable"]]]},{"name":"type","description":"the type of this table, used to place in relevant arrays","optional":true,"type":[[["string"]]]}],"meta":{"line":54,"file":"TableManager.js","path":"app/database/tables"}}],"meta":{"line":8,"file":"TableManager.js","path":"app/database/tables"}},{"name":"voiceRolesTable","description":"Contains API methods for the voiceRoles database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get voice role settings.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"voiceRoles.js","path":"app/database/tables"}},{"name":"add","description":"Add a guild to the voicemanager","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"voiceRoles.js","path":"app/database/tables"}},{"name":"delete","description":"Remove a guild from the voicel role manager","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"voiceRoles.js","path":"app/database/tables"}},{"name":"edit","description":"Edit the voice role manager for a guild","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"data","description":"an object containing key value pairs of role snowflakes and an array of channel snowflakes","type":[[["Object"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":42,"file":"voiceRoles.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"voiceRoles.js","path":"app/database/tables"}},{"name":"volumesTable","description":"Contains API methods for the volumes database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get volume data.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"volumes.js","path":"app/database/tables"}},{"name":"add","description":"Add a guild to volumes","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"volumes.js","path":"app/database/tables"}},{"name":"delete","description":"Remove a guild from volumes","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"volumes.js","path":"app/database/tables"}},{"name":"edit","description":"Edit the volume for a guild","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"volume","description":"the new volume to save","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":42,"file":"volumes.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"volumes.js","path":"app/database/tables"}},{"name":"CommandInteraction","description":"Represents a command interaction, see {@link InteractionClient}.","extends":[[["Interaction"]]],"props":[{"name":"id","description":"The ID of this interaction.","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":26,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"token","description":"The token of this interaction.","readonly":true,"type":[[["string"]]],"meta":{"line":33,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"commandID","description":"The ID of the invoked command.","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":40,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"commandName","description":"The name of the invoked command.","readonly":true,"type":[[["string"]]],"meta":{"line":47,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"options","description":"The options passed to the command.","readonly":true,"type":[[["Object"]]],"meta":{"line":54,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"channel","description":"The channel this interaction was sent in.","readonly":true,"nullable":true,"type":[[["Channel"]]],"meta":{"line":61,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"user","description":"If this interaction was sent in a DM, the user which sent it.","readonly":true,"nullable":true,"type":[[["User"]]],"meta":{"line":68,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"guild","description":"The guild this interaction was sent in, if any.","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":75,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it.","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":82,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at.","readonly":true,"type":[[["number"]]],"meta":{"line":90,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"createdAt","description":"The time the interaction was created at.","readonly":true,"type":[[["Date"]]],"meta":{"line":99,"file":"CommandInteraction.js","path":"app/discord"}}],"methods":[{"name":"acknowledge","description":"Acknowledge this interaction without content.","params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]}],"async":true,"meta":{"line":107,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"reply","description":"Reply to this interaction.","params":[{"name":"content","description":"The content for the message.","nullable":true,"type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide.","nullable":true,"type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"meta":{"line":116,"file":"CommandInteraction.js","path":"app/discord"}}],"meta":{"line":10,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"BaseCommand","description":"Represents a command that can be triggered in discord","abstract":true,"construct":{"name":"BaseCommand","description":"Create a new command","params":[{"name":"socket","description":"the handler that will call the command","type":[[["DiscordManager"]]]},{"name":"data","description":"the data that defines the command","type":[[["CommandData"]]]}]},"props":[{"name":"socket","description":"The discord manager that calls this command","type":[[["DiscordManager"]]],"meta":{"line":39,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"name","description":"The base name for this command, how the command is called in discord (aside from aliases)","type":[[["string"]]],"meta":{"line":46,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"aliases","description":"The aliases for this command","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":54,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"description","description":"What this command does","nullable":true,"type":[[["string"]]],"meta":{"line":63,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"usage","description":"The usage for this command","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":72,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"guild","description":"The guild this command is restricted to, if any","type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]],"meta":{"line":81,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"channel","description":"The channel this command is restricted to, if any","type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]],"meta":{"line":90,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"role","description":"The role this command is restricted to, if any","nullable":true,"type":[[["string"]]],"meta":{"line":99,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"permissions","description":"The permissions requied to use this command, if any","nullable":true,"type":[[["PermissionResolvable"]]],"meta":{"line":108,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"user","description":"The user this command is restricted to, if any","type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]],"meta":{"line":117,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"args","description":"Whether arguments are required for this command (false when handled by the the run function)","nullable":true,"type":[[["boolean"]]],"meta":{"line":126,"file":"BaseCommand.js","path":"app/discord/commands"}}],"methods":[{"name":"run","description":"Runs the command","abstract":true,"params":[{"name":"message","description":"the message that executed the command","type":[[["Message"]]]},{"name":"args","description":"the content of the message split on spaces excluding the command name","type":[[["Array","<"],["string",">"]]]}],"meta":{"line":141,"file":"BaseCommand.js","path":"app/discord/commands"}}],"meta":{"line":7,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"CommandManager","description":"Stores the commands for a discord manager\nCommands that are disabled are not registered","props":[{"name":"socket","description":"The discord manager that handles these commands","access":"private","type":[[["DiscordManager"]]],"meta":{"line":12,"file":"CommandManager.js","path":"app/discord/commands"}},{"name":"registered","description":"The registered commands, mapped by name","access":"private","type":[[["Collection","<"],["string",", "],["BaseCommand",">"]]],"meta":{"line":25,"file":"CommandManager.js","path":"app/discord/commands"}}],"methods":[{"name":"registerBuiltIn","description":"Registers built in commands","access":"private","meta":{"line":32,"file":"CommandManager.js","path":"app/discord/commands"}},{"name":"registerGroup","description":"Registers a group of commands","params":[{"name":"commands","description":"the commands to register","type":[[["Array","<"],["BaseCommand",">"]]]},{"name":"group","description":"the group to which this command resides (if disabledCommands includes this group name it will disable this command)","type":[[["string"]]]},{"name":"builtIn","description":"whether this command is built in or not (used to disable commands, do not set this)","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":50,"file":"CommandManager.js","path":"app/discord/commands"}},{"name":"register","description":"Registers a command in the manager for use throughout the application","params":[{"name":"command","description":"the command to register","type":[[["BaseCommand"]]]},{"name":"builtIn","description":"whether this command is built in or not (used to disable commands, do not set this)","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":62,"file":"CommandManager.js","path":"app/discord/commands"}}],"meta":{"line":10,"file":"CommandManager.js","path":"app/discord/commands"}},{"name":"Interaction","description":"Represents an interaction, see {@link InteractionClient}.","extends":[[["Base"]]],"meta":{"line":9,"file":"Interaction.js","path":"app/discord"}},{"name":"BaseAppCommand","description":"Represents an application commandthat can be triggered in discord","abstract":true,"construct":{"name":"BaseAppCommand","description":"Create a new interaction","params":[{"name":"socket","description":"the handler that will call the interaction","type":[[["DiscordManager"]]]},{"name":"data","description":"the data that defines the interaction","type":[[["AppplicationCommandData"]]]}]},"props":[{"name":"channel","description":"The channel this application command is restricted to, if any","type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]],"meta":{"line":35,"file":"BaseAppCommand.js","path":"app/discord/interactions/applicationCommands"}},{"name":"role","description":"The role this application command is restricted to, if any","nullable":true,"type":[[["string"]]],"meta":{"line":44,"file":"BaseAppCommand.js","path":"app/discord/interactions/applicationCommands"}}],"meta":{"line":9,"file":"BaseAppCommand.js","path":"app/discord/interactions/applicationCommands"}},{"name":"BaseInteraction","description":"Represents an interaction that can be triggered in discord","abstract":true,"construct":{"name":"BaseInteraction","description":"Create a new interaction","params":[{"name":"socket","description":"the handler that will call the interaction","type":[[["DiscordManager"]]]},{"name":"data","description":"the data that defines the interaction","type":[[["InteractionData"]]]}]},"props":[{"name":"socket","description":"The discord manager that calls this interaction","type":[[["DiscordManager"]]],"meta":{"line":24,"file":"BaseInteraction.js","path":"app/discord/interactions"}},{"name":"name","description":"The base name for this interaction, pulled from the definition","type":[[["string"]]],"meta":{"line":36,"file":"BaseInteraction.js","path":"app/discord/interactions"}},{"name":"guild","description":"The specific guild(s) this interaction is registered to, if not, global","type":[[["Snowflake"]],[["Array","<"],["Snowflake",">"]]],"meta":{"line":44,"file":"BaseInteraction.js","path":"app/discord/interactions"}},{"name":"permissions","description":"The permissions required to execute the interaction, if any","nullable":true,"type":[[["PermissionResolvable"]]],"meta":{"line":53,"file":"BaseInteraction.js","path":"app/discord/interactions"}}],"methods":[{"name":"run","description":"Runs the command","abstract":true,"params":[{"name":"interaction","description":"the interaction that was executed","type":[[["Interaction"]]]},{"name":"options","description":"the options provided with this interaction","type":[[["Object"]]]}],"meta":{"line":68,"file":"BaseInteraction.js","path":"app/discord/interactions"}}],"meta":{"line":7,"file":"BaseInteraction.js","path":"app/discord/interactions"}},{"name":"InteractionManager","description":"Stores the interactions for a discord manager","props":[{"name":"socket","description":"The discord manager that handles these commands","access":"private","type":[[["DiscordManager"]]],"meta":{"line":19,"file":"InteractionManager.js","path":"app/discord/interactions"}},{"name":"registered","description":"The registered interactions","access":"private","type":[[["Interactions"]]],"meta":{"line":38,"file":"InteractionManager.js","path":"app/discord/interactions"}}],"methods":[{"name":"registerMultiple","description":"Registers a group of interactions","params":[{"name":"interactions","description":"the interactions to register","type":[[["Array","<"],["BaseInteraction",">"]]]},{"name":"type","description":"the type of interaction to register as","type":[[["InteractionType"]]]}],"meta":{"line":49,"file":"InteractionManager.js","path":"app/discord/interactions"}},{"name":"register","description":"Registers an interaction in the manager for use throughout the application","params":[{"name":"interaction","description":"the interaction to register","type":[[["BaseInteraction"]]]},{"name":"type","description":"the type of the interaction","type":[[["string"]]]}],"meta":{"line":61,"file":"InteractionManager.js","path":"app/discord/interactions"}}],"meta":{"line":17,"file":"InteractionManager.js","path":"app/discord/interactions"}},{"name":"BaseRequest","description":"Represents a request that can be made","abstract":true,"construct":{"name":"BaseRequest","description":"Create a new request","params":[{"name":"socket","description":"the handler that will call the request","type":[[["HTTPManager"]]]},{"name":"data","description":"the data that defines the request","type":[[["RequestData"]]]}]},"props":[{"name":"socket","description":"The discord manager that calls this request","type":[[["HTTPManager"]]],"meta":{"line":25,"file":"BaseRequest.js","path":"app/http/requests"}},{"name":"name","description":"The base name for this request, how the request is called via the web (may be prefixed if registered that way)","type":[[["string"]]],"meta":{"line":32,"file":"BaseRequest.js","path":"app/http/requests"}},{"name":"methods","description":"The acceptable methods to this request endpoint","type":[[["Array","<"],["string",">"]]],"meta":{"line":39,"file":"BaseRequest.js","path":"app/http/requests"}},{"name":"description","description":"What this request does","nullable":true,"type":[[["string"]]],"meta":{"line":47,"file":"BaseRequest.js","path":"app/http/requests"}},{"name":"responds","description":"Whether this request has a built in response","nullable":true,"type":[[["boolean"]]],"meta":{"line":56,"file":"BaseRequest.js","path":"app/http/requests"}}],"methods":[{"name":"run","description":"Runs the request","abstract":true,"params":[{"name":"method","description":"the method used to fetch this request","type":[[["string"]]]},{"name":"url","description":"the full uri of the request","type":[[["string"]]]},{"name":"headers","description":"the headers sent with this request","type":[[["Object"]]]},{"name":"data","description":"the data recieved with the request","nullable":true,"type":[[["string"]]]}],"returns":{"types":[[["RespondData"]],[["Promise","<"],["RespondData",">"]]],"description":"the data to respond with","nullable":true},"meta":{"line":82,"file":"BaseRequest.js","path":"app/http/requests"}}],"meta":{"line":7,"file":"BaseRequest.js","path":"app/http/requests"}},{"name":"RequestManager","description":"Stores the requests for a http manager","props":[{"name":"socket","description":"The http manager that handles these requests","access":"private","type":[[["HTTPManager"]]],"meta":{"line":11,"file":"RequestManager.js","path":"app/http/requests"}},{"name":"registered","description":"The registered requests, mapped by name","access":"private","type":[[["Collection","<"],["string",", "],["BaseRequest",">"]]],"meta":{"line":24,"file":"RequestManager.js","path":"app/http/requests"}}],"methods":[{"name":"registerGroup","description":"Registers a group of requests","params":[{"name":"requests","description":"the requests to register","type":[[["Array","<"],["BaseRequest",">"]]]},{"name":"group","description":"the group to which this request resides, the group name is prepended in the url path e.g. group/request","type":[[["string"]]]}],"meta":{"line":35,"file":"RequestManager.js","path":"app/http/requests"}},{"name":"register","description":"Registers a request in the manager for use throughout the application","params":[{"name":"request","description":"the request to register","type":[[["BaseRequest"]]]},{"name":"prefix","description":"the prefix to use when checking the uri","optional":true,"default":"'/'","type":[[["string"]]]}],"meta":{"line":46,"file":"RequestManager.js","path":"app/http/requests"}}],"meta":{"line":9,"file":"RequestManager.js","path":"app/http/requests"}},{"name":"TwitchCommand","description":"Represents a command that can be triggered in twitch","abstract":true,"construct":{"name":"TwitchCommand","description":"Create a new command","params":[{"name":"socket","description":"the IRC that will call the command","type":[[["IrcManager"]]]},{"name":"data","description":"the data that defines the command","type":[[["TwitchCommandData"]]]}]},"props":[{"name":"socket","description":"The twitch manager that calls this command","type":[[["IrcManager"]]],"meta":{"line":22,"file":"TwitchCommand.js","path":"app/irc/commands"}},{"name":"name","description":"The base name for this command, how the command is called in discord (aside from aliases)","type":[[["string"]]],"meta":{"line":29,"file":"TwitchCommand.js","path":"app/irc/commands"}}],"methods":[{"name":"run","description":"Runs the command","abstract":true,"params":[{"name":"handler","description":"the handler that handles interacting with the socket","type":[[["CommandHandler"]]]},{"name":"hasArgsMod","description":"whether the command has arguments and the user is privileged","type":[[["boolean"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"whether the command has been successfully handled"},"meta":{"line":44,"file":"TwitchCommand.js","path":"app/irc/commands"}}],"meta":{"line":7,"file":"TwitchCommand.js","path":"app/irc/commands"}},{"name":"TwitchCommandManager","description":"Stores the commands for an IRC manager","props":[{"name":"socket","description":"The IRC manager that handles these commands","access":"private","type":[[["IrcManager"]]],"meta":{"line":11,"file":"TwitchCommandManager.js","path":"app/irc/commands"}},{"name":"registered","description":"The registered commands, mapped by name","type":[[["Collection","<"],["string",", "],["TwitchCommand",">"]]],"meta":{"line":23,"file":"TwitchCommandManager.js","path":"app/irc/commands"}}],"methods":[{"name":"register","description":"Registers a command in the manager for use throughout the application","params":[{"name":"command","description":"the command to register","type":[[["TwitchCommand"]]]}],"meta":{"line":35,"file":"TwitchCommandManager.js","path":"app/irc/commands"}}],"meta":{"line":9,"file":"TwitchCommandManager.js","path":"app/irc/commands"}},{"name":"CommandHandler","description":"The interface for any recieved twitch command","props":[{"name":"socket","description":"The twitch manager that is executing this command","type":[[["IrcManager"]]],"meta":{"line":13,"file":"command.js","path":"app/irc/handlers"}},{"name":"channel","description":"The name and id of the channel that the command was executed in","type":[[["Object"]]],"meta":{"line":20,"file":"command.js","path":"app/irc/handlers"}},{"name":"user","description":"The user that executed the command","type":[[["Object"]]],"meta":{"line":27,"file":"command.js","path":"app/irc/handlers"}},{"name":"command","description":"The database row that the command identified to","type":[[["Object"]]],"meta":{"line":34,"file":"command.js","path":"app/irc/handlers"}},{"name":"args","description":"The content of the message split on spaces excluding the command name","type":[[["Array","<"],["string",">"]]],"meta":{"line":41,"file":"command.js","path":"app/irc/handlers"}},{"name":"isBroadcaster","description":"Whether the user that executed this command is the broadcaster","type":[[["boolean"]]],"meta":{"line":53,"file":"command.js","path":"app/irc/handlers"}},{"name":"isPrivileged","description":"Whether the user that executed this command has moderation privileges","type":[[["boolean"]]],"meta":{"line":59,"file":"command.js","path":"app/irc/handlers"}},{"name":"isVip","description":"Whether the user that executed this command is vip","type":[[["boolean"]]],"meta":{"line":65,"file":"command.js","path":"app/irc/handlers"}},{"name":"hasArgs","description":"Whether arguments were provided with this exectuion","type":[[["boolean"]]],"meta":{"line":71,"file":"command.js","path":"app/irc/handlers"}},{"name":"target","description":"The targetted user, simply the first arg when provided, otherwise the user executing","type":[[["string"]]],"meta":{"line":77,"file":"command.js","path":"app/irc/handlers"}},{"name":"executor","description":"The command executor if the command is handled by a responder","nullable":true,"type":[[["TwitchCommand"]]],"meta":{"line":83,"file":"command.js","path":"app/irc/handlers"}},{"name":"handled","description":"Whether this command has already been handled","type":[[["boolean"]]],"meta":{"line":89,"file":"command.js","path":"app/irc/handlers"}}],"methods":[{"name":"execute","description":"Executes the command handled by this handler","access":"private","meta":{"line":96,"file":"command.js","path":"app/irc/handlers"}},{"name":"handle","description":"Handle actual command execution","access":"private","async":true,"meta":{"line":139,"file":"command.js","path":"app/irc/handlers"}},{"name":"respond","description":"Responds to the command with formatted content (can be used multiple times)","params":[{"name":"message","description":"the message to say","type":[[["string"]]]},{"name":"mention","description":"whether to mention the targetted user","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":162,"file":"command.js","path":"app/irc/handlers"}}],"meta":{"line":10,"file":"command.js","path":"app/irc/handlers"}},{"name":"APIManager","description":"Parent implementation for API request-based service classes.","extends":[[["BaseManager"]]],"abstract":true,"props":[{"name":"api","description":"API request shortcut.","access":"private","readonly":true,"type":[[["Requester"]]],"meta":{"line":23,"file":"APIManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}},{"name":"driver","description":"The driver that handles this managers API","readonly":true,"type":[[["Object"]]],"meta":{"line":23,"file":"BaseManager.js","path":"app/managers"}}],"meta":{"line":12,"file":"APIManager.js","path":"app/managers"}},{"name":"AuthManager","description":"Auth manager for the application.","extends":[[["APIManager"]]],"props":[{"name":"driver","description":"The Authentication handler.","access":"private","type":[[["Axios"]]],"meta":{"line":13,"file":"AuthManager.js","path":"app/managers"}},{"name":"twitch","description":"The Twitch manager that instantiated this.","readonly":true,"type":[[["TwitchManager"]]],"meta":{"line":20,"file":"AuthManager.js","path":"app/managers"}},{"name":"api","description":"API request shortcut.","access":"private","readonly":true,"type":[[["Requester"]]],"meta":{"line":23,"file":"APIManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"generateToken","description":"Generates the twitch api tokens for the given slug","access":"private","params":[{"name":"slug","description":"the user to generate the token for (_code must be in database)","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"token"},"meta":{"line":35,"file":"AuthManager.js","path":"app/managers"}},{"name":"getAccessToken","description":"Gets the twitch api access token for the given slug","params":[{"name":"slug","description":"the user to get the token for","optional":true,"default":"ApplicationOptions.twitch.irc?.identity?.username","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"token"},"meta":{"line":62,"file":"AuthManager.js","path":"app/managers"}},{"name":"refreshToken","description":"Refreshes the tokens for the given slug","access":"private","params":[{"name":"slug","description":"the user to refresh the tokens for","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"token"},"meta":{"line":78,"file":"AuthManager.js","path":"app/managers"}},{"name":"validateToken","description":"Validates the token provided","access":"private","params":[{"name":"token","description":"a twitch api token","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":105,"file":"AuthManager.js","path":"app/managers"}}],"meta":{"line":9,"file":"AuthManager.js","path":"app/managers"}},{"name":"BaseManager","description":"Manages the data and methods for a given API","abstract":true,"props":[{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}},{"name":"driver","description":"The driver that handles this managers API","readonly":true,"type":[[["Object"]]],"meta":{"line":23,"file":"BaseManager.js","path":"app/managers"}}],"meta":{"line":7,"file":"BaseManager.js","path":"app/managers"}},{"name":"DatabaseManager","description":"Database manager for the application.","extends":[[["BaseManager"]]],"props":[{"name":"driver","description":"The database driver.","access":"private","type":[[["mysql2Pool"]]],"meta":{"line":15,"file":"DatabaseManager.js","path":"app/managers"}},{"name":"tables","description":"The database tables.","type":[[["TableManager"]]],"meta":{"line":26,"file":"DatabaseManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"connection","description":"Create a connection to the database.","access":"private","returns":[[["Promise","<"],["mysql2Connection",">"]]],"meta":{"line":34,"file":"DatabaseManager.js","path":"app/managers"}},{"name":"query","description":"Query the database.","params":[{"name":"query","description":"the query to make","type":[[["string"]]]},{"name":"args","description":"the extra args to pass with the query","optional":true,"default":null,"type":[[["Array"]]]}],"async":true,"returns":[[["Promise"]]],"meta":{"line":49,"file":"DatabaseManager.js","path":"app/managers"}}],"meta":{"line":11,"file":"DatabaseManager.js","path":"app/managers"}},{"name":"DiscordManager","description":"Discord manager for the application.","extends":[[["EventManager"]]],"props":[{"name":"driver","description":"The Discord.js API / Websocket Client.","type":[[["discordjsClient"]]],"meta":{"line":25,"file":"DiscordManager.js","path":"app/managers"}},{"name":"embeds","description":"The Discord rich embeds.","type":[[["Object"]]],"meta":{"line":35,"file":"DiscordManager.js","path":"app/managers"}},{"name":"messages","description":"The message transformers.","type":[[["Object"]]],"meta":{"line":41,"file":"DiscordManager.js","path":"app/managers"}},{"name":"commandManager","description":"The command manager that registers all commands","type":[[["CommandManager"]]],"meta":{"line":47,"file":"DiscordManager.js","path":"app/managers"}},{"name":"interactionManager","description":"The interaction manager that registers all interactions","type":[[["InteractionManager"]]],"meta":{"line":53,"file":"DiscordManager.js","path":"app/managers"}},{"name":"cache","description":"The local cache of database tables, each mapped by guild id","type":[[["Object","<"],["TableName",", "],["Collection","<"],["Snowflake",", "],["Object",">>"]]],"meta":{"line":64,"file":"DiscordManager.js","path":"app/managers"}},{"name":"commands","description":"The commands for the socket, mapped by input. Only available after DiscordManager#init()","type":[[["Collection","<"],["string",", "],["BaseCommand",">"]]],"meta":{"line":90,"file":"DiscordManager.js","path":"app/managers"}},{"name":"interactions","description":"The interactions for the socket, mapped by type and then by name. Only available after DiscordManager#init()","type":[[["Interactions"]]],"meta":{"line":97,"file":"DiscordManager.js","path":"app/managers"}},{"name":"events","description":"The events this driver handles","type":[[["Object"]]],"meta":{"line":18,"file":"EventManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"init","description":"Initialize the manager.","async":true,"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":71,"file":"DiscordManager.js","path":"app/managers"}},{"name":"registerCommands","description":"Sends global registration data to discord for all application commands that do not have guilds specified\nOR\nwhen guildID is provided, register all global commands (that are not yet registered globally) and commands for the guild specified\nWARNING: this overwrites all existing global / guild commands, if you do not want this to happen, use `registerCommand`","params":[{"name":"guildId","description":"the id of the guild whose application command to register","optional":true,"type":[[["Snowflake"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":115,"file":"DiscordManager.js","path":"app/managers"}},{"name":"registerCommand","description":"Register an interaction","params":[{"name":"name","description":"the name of the application command to register","type":[[["string"]]]}],"async":true,"returns":[["*"]],"meta":{"line":151,"file":"DiscordManager.js","path":"app/managers"}},{"name":"setCache","description":"Cache all managers and music.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":176,"file":"DiscordManager.js","path":"app/managers"}},{"name":"cacheMusic","description":"Cache the music data.","access":"private","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":200,"file":"DiscordManager.js","path":"app/managers"}},{"name":"cacheRooms","description":"Cache room data.","access":"private","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":221,"file":"DiscordManager.js","path":"app/managers"}},{"name":"cacheTable","description":"Query the database and set a given cache.","access":"private","params":[{"name":"table","description":"the database table to get from","type":[[["BaseTable"]]]},{"name":"map","description":"the map to store data in","type":[[["Collection"]]]},{"name":"key","description":"a key to use for the new map","type":[[["string"]]]},{"name":"secondaryKey","description":"a dashed key to use for the new map","optional":true,"default":false,"type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":251,"file":"DiscordManager.js","path":"app/managers"}},{"name":"getChannel","description":"Get the channel for the given slug.","params":[{"name":"slug","description":"the channel name in settings to get","type":[[["string"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":263,"file":"DiscordManager.js","path":"app/managers"}},{"name":"getWebhook","description":"Get the webhook for the given slug.","params":[{"name":"slug","description":"the webhook name in settings to get","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Webhook",">"]]],"nullable":true},"meta":{"line":273,"file":"DiscordManager.js","path":"app/managers"}},{"name":"getContent","description":"Get the transformed content for the given slug.","params":[{"name":"slug","description":"the name of the message to get","type":[[["string"]]]},{"name":"args","description":"arguments to pass to the transformer","type":[[["Array"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":290,"file":"DiscordManager.js","path":"app/managers"}},{"name":"getEmbed","description":"Get the transformed embed for the given slug.","params":[{"name":"slug","description":"the name of the embed to get","type":[[["string"]]]},{"name":"args","description":"arguments to pass to the constructor","type":[[["Array"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":307,"file":"DiscordManager.js","path":"app/managers"}},{"name":"sendMessage","description":"Send a message with the given content and embed.","params":[{"name":"slug","description":"the channel name in settings to get and send to","type":[[["string"]]]},{"name":"content","description":"the content to send","optional":true,"type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"meta":{"line":324,"file":"DiscordManager.js","path":"app/managers"}},{"name":"sendWebhook","description":"Send a webhook with the given content and embed.","params":[{"name":"slug","description":"the webhook name in settings to get and send to","type":[[["string"]]]},{"name":"content","description":"the content to send","optional":true,"type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"meta":{"line":343,"file":"DiscordManager.js","path":"app/managers"}},{"name":"attach","description":"Attach the event listeners to the socket.","access":"private","inherits":"EventManager#attach","inherited":true,"meta":{"line":25,"file":"EventManager.js","path":"app/managers"}},{"name":"listen","description":"Listen for a socket event.","access":"private","inherits":"EventManager#listen","inherited":true,"params":[{"name":"event","description":"the name of the event to listen for","type":[[["string"]]]},{"name":"listener","description":"the function to call on event","type":[[["function"]]]}],"meta":{"line":39,"file":"EventManager.js","path":"app/managers"}}],"meta":{"line":21,"file":"DiscordManager.js","path":"app/managers"}},{"name":"EventLogger","description":"An event emitter that emits whenever major events - worthy of logging - occur on a platform.","props":[{"name":"app","description":"The application that instantiated this Log emitter","readonly":true,"type":[[["Application"]]],"meta":{"line":12,"file":"EventLogger.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":24,"file":"EventLogger.js","path":"app/managers"}}],"events":[{"name":"discordMessageClear","description":"Emitted whenever a user sucessfully executes the clear command","params":[{"name":"message","description":"The original clear command message","type":[[["Message"]]]},{"name":"clearMessage","description":"The automatically generated log string for this message clear","type":[[["string"]]]}],"meta":{"line":39,"file":"clear.js","path":"app/discord/commands/moderation"}},{"name":"discordBanAdd","description":"Emitted whenever a member is banned from a guild.","params":[{"name":"guild","description":"The guild the ban occured in","type":[[["Guild"]]]},{"name":"user","description":"The user that was banned","type":[[["User"]]]},{"name":"embed","description":"The automatically generated embed for this ban","type":[[["MessageEmbed"]]]}],"meta":{"line":7,"file":"guildBanAdd.js","path":"app/discord/events"}},{"name":"discordBanRemove","description":"Emitted whenever a member is unbanned from a guild.","params":[{"name":"guild","description":"The guild the unban occured in","type":[[["Guild"]]]},{"name":"user","description":"The user that was unbanned","type":[[["User"]]]},{"name":"embed","description":"The automatically generated embed for this unban","type":[[["MessageEmbed"]]]}],"meta":{"line":7,"file":"guildBanRemove.js","path":"app/discord/events"}},{"name":"discordMemberAdd","description":"Emitted whenever a user joins a guild.","params":[{"name":"member","description":"The member that has joined a guild","type":[[["GuildMember"]]]},{"name":"embed","description":"The automatically generated embed for this member add","type":[[["MessageEmbed"]]]}],"meta":{"line":9,"file":"guildMemberAdd.js","path":"app/discord/events"}},{"name":"discordMemberRemove","description":"Emitted whenever a member leaves a guild, or is kicked.","params":[{"name":"member","description":"The member that has left/been kicked from the guild","type":[[["GuildMember"]]]},{"name":"embed","description":"The automatically generated embed for this member remove","type":[[["MessageEmbed"]]]}],"meta":{"line":5,"file":"guildMemberRemove.js","path":"app/discord/events"}},{"name":"discordMemberUpdate","description":"Emitted whenever a guild member changes - i.e. new role, removed role, nickname.","params":[{"name":"oldMember","description":"The member before the update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the update","type":[[["GuildMember"]]]},{"name":"embed","description":"The automatically generated embed for this member update","nullable":true,"type":[[["MessageEmbed"]]]},{"name":"type","description":"the type of change that occurred (roleUpdate or nickChange)","type":[[["string"]]]}],"meta":{"line":49,"file":"guildMemberUpdate.js","path":"app/discord/events"}},{"name":"discordMessageDelete","description":"Emitted whenever a message is deleted. Does not emit for uncached messages","params":[{"name":"message","description":"The deleted message","type":[[["Message"]]]},{"name":"embed","description":"The automatically generated embed for this message deletion","type":[[["MessageEmbed"]]]}],"meta":{"line":19,"file":"messageDelete.js","path":"app/discord/events"}},{"name":"discordMessageUpdate","description":"Emitted whenever a message is updated - e.g. embed or content change.","params":[{"name":"oldMessage","description":"The message before the update","type":[[["Message"]]]},{"name":"newMessage","description":"The message after the update","type":[[["Messaage"]]]},{"name":"embed","description":"The automatically generated embed for this message update","type":[[["MessageEmbed"]]]}],"meta":{"line":37,"file":"messageUpdate.js","path":"app/discord/events"}},{"name":"twitchWhisper","description":"Emitted whenever the bot recieves a whisper on twitch","params":[{"name":"embed","description":"The automatically generated embed for this whisper","type":[[["MessageEmbed"]]]},{"name":"message","description":"The raw message recieved","type":[[["string"]]]},{"name":"handle","description":"The handle of the user that sent this whisper","type":[[["string"]]]}],"meta":{"line":9,"file":"whisper.js","path":"app/irc/events"}},{"name":"twitchAutoMod","description":"Emitted whenever an automatic moderation action on twitch occurs","params":[{"name":"action","description":"The action taken in this moderation event","type":[[["string"]]]},{"name":"content","description":"The automatically generated content for this moderation event","type":[[["string"]]]},{"name":"embed","description":"The automatically generated embed for this moderation event","type":[[["MessageEmbed"]]]},{"name":"channel","description":"The irc channel name (including #) where this event occured","type":[[["string"]]]},{"name":"filter","description":"The filter that triggered this action","type":[[["Object"]]]}],"meta":{"line":54,"file":"moderation.js","path":"app/irc/handlers"}}],"meta":{"line":8,"file":"EventLogger.js","path":"app/managers"}},{"name":"EventManager","description":"Parent implementation for event-driven service classes.","extends":[[["BaseManager"]]],"abstract":true,"props":[{"name":"events","description":"The events this driver handles","type":[[["Object"]]],"meta":{"line":18,"file":"EventManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}},{"name":"driver","description":"The driver that handles this managers API","readonly":true,"type":[[["Object"]]],"meta":{"line":23,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"attach","description":"Attach the event listeners to the socket.","access":"private","meta":{"line":25,"file":"EventManager.js","path":"app/managers"}},{"name":"listen","description":"Listen for a socket event.","access":"private","params":[{"name":"event","description":"the name of the event to listen for","type":[[["string"]]]},{"name":"listener","description":"the function to call on event","type":[[["function"]]]}],"meta":{"line":39,"file":"EventManager.js","path":"app/managers"}}],"meta":{"line":10,"file":"EventManager.js","path":"app/managers"}},{"name":"HTTPManager","description":"HTTP manager for the application. Can run https mode if useHttps is enabled in options.\nNode cannot run on ports below 1024 on linux natively. It is suggested to use a proxy from\nsomething such as nginx in these cases.","extends":[[["EventManager"]]],"props":[{"name":"driver","description":"The HTTP server.","type":[[["httpServer"]]],"meta":{"line":32,"file":"HTTPManager.js","path":"app/managers"}},{"name":"requestsManager","description":"The socket request events.","type":[[["Object"]]],"meta":{"line":42,"file":"HTTPManager.js","path":"app/managers"}},{"name":"requests","description":"The requests for the socket, mapped by input. Only available after HTTPManager#init()","type":[[["Collection","<"],["string",", "],["BaseRequest",">"]]],"meta":{"line":58,"file":"HTTPManager.js","path":"app/managers"}},{"name":"events","description":"The events this driver handles","type":[[["Object"]]],"meta":{"line":18,"file":"EventManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"init","description":"Initialize the manager.","returns":[[["Promise"]]],"meta":{"line":49,"file":"HTTPManager.js","path":"app/managers"}},{"name":"getChannel","description":"Get the channel for the given slug.","params":[{"name":"slug","description":"the username of the stream to get a notification channel for","type":[[["string"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":69,"file":"HTTPManager.js","path":"app/managers"}},{"name":"getMessage","description":"Get the message for the given slug.","params":[{"name":"slug","description":"the username of the stream to get a notification message for","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Message",">"]]],"nullable":true},"meta":{"line":83,"file":"HTTPManager.js","path":"app/managers"}},{"name":"getRole","description":"Get the role for the given slug.","params":[{"name":"slug","description":"the username of the stream to get a notification role for","type":[[["string"]]]},{"name":"channel","description":"a dicord js cached channel to get role data from","type":[[["Channel"]]]}],"async":true,"returns":[[["Role"]]],"meta":{"line":102,"file":"HTTPManager.js","path":"app/managers"}},{"name":"setMessage","description":"Update the messageID for stream stop editing","params":[{"name":"slug","description":"the username of the stream to edit a notification for","type":[[["string"]]]},{"name":"msgID","description":"the original snowflake message id","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":124,"file":"HTTPManager.js","path":"app/managers"}},{"name":"attach","description":"Attach the event listeners to the socket.","access":"private","inherits":"EventManager#attach","inherited":true,"meta":{"line":25,"file":"EventManager.js","path":"app/managers"}},{"name":"listen","description":"Listen for a socket event.","access":"private","inherits":"EventManager#listen","inherited":true,"params":[{"name":"event","description":"the name of the event to listen for","type":[[["string"]]]},{"name":"listener","description":"the function to call on event","type":[[["function"]]]}],"meta":{"line":39,"file":"EventManager.js","path":"app/managers"}}],"meta":{"line":17,"file":"HTTPManager.js","path":"app/managers"}},{"name":"IrcManager","description":"IRC manager for the application.","extends":[[["EventManager"]]],"props":[{"name":"driver","description":"The IRC Client.","type":[[["tmijsClient"]]],"meta":{"line":26,"file":"IrcManager.js","path":"app/managers"}},{"name":"twitch","description":"The Twitch manager that instantiated this.","readonly":true,"type":[[["TwitchManager"]]],"meta":{"line":32,"file":"IrcManager.js","path":"app/managers"}},{"name":"cache","description":"The local cache of database tables, each mapped by guild id","type":[[["Object","<"],["TableName",", "],["*",">"]]],"meta":{"line":49,"file":"IrcManager.js","path":"app/managers"}},{"name":"commandResponders","description":"The command manager that stores specially handled commands","type":[[["TwitchCommandManager"]]],"meta":{"line":55,"file":"IrcManager.js","path":"app/managers"}},{"name":"limiter","description":"The rate limiter.\nTwitch IRC only allows 100 requests every 30 seconds.","type":[[["RateLimiter"]]],"meta":{"line":62,"file":"IrcManager.js","path":"app/managers"}},{"name":"throttle","description":"The command throttle.","type":[[["Throttle"]]],"meta":{"line":68,"file":"IrcManager.js","path":"app/managers"}},{"name":"events","description":"The events this driver handles","type":[[["Object"]]],"meta":{"line":18,"file":"EventManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"init","description":"Initialize the manager.","async":true,"returns":[[["Promise"]]],"meta":{"line":75,"file":"IrcManager.js","path":"app/managers"}},{"name":"say","description":"Send a message.","params":[{"name":"channel","description":"the twitch channel to post in","type":[[["string"]]]},{"name":"message","description":"the message to post","type":[[["string"]]]}],"meta":{"line":91,"file":"IrcManager.js","path":"app/managers"}},{"name":"delete","description":"Send a command to delete the given message.","params":[{"name":"channel","description":"the twitch channel to delete from","type":[[["string"]]]},{"name":"uuid","description":"the unique id of the message","type":[[["string"]]]},{"name":"callback","description":"called after succesfull deletion","optional":true,"default":null,"type":[[["function"]]]}],"meta":{"line":104,"file":"IrcManager.js","path":"app/managers"}},{"name":"timeout","description":"Time a user out for the given duration.","params":[{"name":"channel","description":"the twitch channel to timeout in","type":[[["string"]]]},{"name":"username","description":"the twitch name to timeout","type":[[["string"]]]},{"name":"duration","description":"the duration of the timeout","type":[[["number"]]]},{"name":"callback","description":"called after succesfull timeout","optional":true,"default":null,"type":[[["function"]]]}],"meta":{"line":125,"file":"IrcManager.js","path":"app/managers"}},{"name":"ban","description":"Ban a user.","params":[{"name":"channel","description":"the twitch channel to ban in","type":[[["string"]]]},{"name":"username","description":"the twitch user to ban","type":[[["string"]]]},{"name":"callback","description":"called after succesfull ban","optional":true,"default":null,"type":[[["function"]]]}],"meta":{"line":145,"file":"IrcManager.js","path":"app/managers"}},{"name":"logModeration","description":"Log a moderation action to the database.","params":[{"name":"values","description":"the extra arguments to log","variable":true,"type":[["*"]]}],"meta":{"line":163,"file":"IrcManager.js","path":"app/managers"}},{"name":"setCache","description":"Cache all moderation filters, commands, and jokes.","returns":[[["Promise"]]],"meta":{"line":171,"file":"IrcManager.js","path":"app/managers"}},{"name":"cacheJokes","description":"Cache the jokes.","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":181,"file":"IrcManager.js","path":"app/managers"}},{"name":"cacheFilters","description":"Cache the moderation filters.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":195,"file":"IrcManager.js","path":"app/managers"}},{"name":"cacheCommands","description":"Cache the commands.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":207,"file":"IrcManager.js","path":"app/managers"}},{"name":"cacheVariables","description":"Cache the variables","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":219,"file":"IrcManager.js","path":"app/managers"}},{"name":"cacheTable","description":"Query the database and set a given cache.","params":[{"name":"table","description":"the database table to get","type":[[["string"]]]},{"name":"map","description":"the map to store data in","type":[[["Collection"]]]},{"name":"key","description":"a key to use for the new map","optional":true,"type":[[["string"]]]},{"name":"secondaryKey","description":"a dashed key to use for the new map","optional":true,"default":false,"type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":247,"file":"IrcManager.js","path":"app/managers"}},{"name":"attach","description":"Attach the event listeners to the socket.","access":"private","inherits":"EventManager#attach","inherited":true,"meta":{"line":25,"file":"EventManager.js","path":"app/managers"}},{"name":"listen","description":"Listen for a socket event.","access":"private","inherits":"EventManager#listen","inherited":true,"params":[{"name":"event","description":"the name of the event to listen for","type":[[["string"]]]},{"name":"listener","description":"the function to call on event","type":[[["function"]]]}],"meta":{"line":39,"file":"EventManager.js","path":"app/managers"}}],"meta":{"line":19,"file":"IrcManager.js","path":"app/managers"}},{"name":"LogManager","description":"Log manager for the application.","extends":[[["BaseManager"]]],"props":[{"name":"driver","description":"The log driver.","access":"private","type":[[["Winston"]]],"meta":{"line":41,"file":"LogManager.js","path":"app/managers"}},{"name":"webhookClient","description":"The webhook client that handles sending error logs to discord","access":"private","type":[[["WebhookClient"]]],"meta":{"line":55,"file":"LogManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"out","description":"Write a message to the log.","params":[{"name":"level","description":"the log level","type":[[["LogLevel"]]]},{"name":"source","description":"the module sourcing this log","type":[[["Module"]]]},{"name":"message","description":"the message to output","optional":true,"default":"No message specified","type":[[["string"]]]},{"name":"error","description":"the full error object to use for a stacktrace","optional":true,"type":[[["Error"]]]}],"async":true,"meta":{"line":65,"file":"LogManager.js","path":"app/managers"}},{"name":"fatal","description":"Exit the process after writing a message to the log.","params":[{"name":"level","description":"the log level","type":[[["LogLevel"]]]},{"name":"source","description":"the module sourcing this log","type":[[["Module"]]]},{"name":"message","description":"the message to output","optional":true,"default":"No message specified","type":[[["string"]]]},{"name":"error","description":"the full error object to use for a stacktrace","optional":true,"type":[[["Error"]]]}],"async":true,"meta":{"line":88,"file":"LogManager.js","path":"app/managers"}},{"name":"webhook","description":"Send a log message via webhook.","access":"private","params":[{"name":"level","description":"the log level","type":[[["LogLevel"]]]},{"name":"path","description":"the path to the module that this occured in","type":[[["string"]]]},{"name":"message","description":"the message to send","type":[[["string"]]]},{"name":"error","description":"the full error object to use for a stacktrace","optional":true,"type":[[["Error"]]]}],"returns":[[["Promise","<"],["axiosRequest",", "],["axiosResponse",">"]]],"meta":{"line":103,"file":"LogManager.js","path":"app/managers"}},{"name":"path","description":"Calculate the path of the given source module.","access":"private","params":[{"name":"source","description":"the module that made this log","type":[[["Module"]]]}],"returns":[[["string"]]],"meta":{"line":153,"file":"LogManager.js","path":"app/managers"}}],"meta":{"line":13,"file":"LogManager.js","path":"app/managers"}},{"name":"TwitchManager","description":"Twitch manager for the application.","extends":[[["APIManager"]]],"props":[{"name":"driver","description":"The Twitch API handler.","type":[[["Axios"]]],"meta":{"line":17,"file":"TwitchManager.js","path":"app/managers"}},{"name":"auth","description":"The Authentication manager for the application.","type":[[["AuthManager"]]],"meta":{"line":27,"file":"TwitchManager.js","path":"app/managers"}},{"name":"irc","description":"The IRC manager for the application.","type":[[["IrcManager"]]],"meta":{"line":34,"file":"TwitchManager.js","path":"app/managers"}},{"name":"api","description":"API request shortcut.","access":"private","readonly":true,"type":[[["Requester"]]],"meta":{"line":23,"file":"APIManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"fetchChannel","description":"Fetch the channel for the application's channel ID.","params":[{"name":"userId","description":"fetch channel data from a specific user id","optional":true,"default":"ApplicationOptions.twitch.channel?.id","type":[[["number"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":43,"file":"TwitchManager.js","path":"app/managers"}},{"name":"userChannel","description":"Fetch the channel for the specified user's channel name.","params":[{"name":"user","description":"the username to fetch channel data of","type":[[["string"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":56,"file":"TwitchManager.js","path":"app/managers"}},{"name":"getID","description":"Get the cached channel id or fetch it from the api for the user name","params":[{"name":"user","description":"the username to fetch the id of","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":65,"file":"TwitchManager.js","path":"app/managers"}},{"name":"follow","description":"Fetch a follow object for the given user ID.","params":[{"name":"userId","description":"the user id to check the follow for","type":[[["number"]]]},{"name":"streamerId","description":"the channel id to check if following","optional":true,"default":"ApplicationOptions.twitch.channel?.id","type":[[["number"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":88,"file":"TwitchManager.js","path":"app/managers"}},{"name":"fetchStream","description":"Fetch the stream for the application's channel ID.","params":[{"name":"userId","description":"fetch stream data from a specific user id","optional":true,"default":"ApplicationOptions.twitch.channel?.id","type":[[["number"]]]}],"returns":[[["void"]]],"meta":{"line":102,"file":"TwitchManager.js","path":"app/managers"}},{"name":"fetchUser","description":"Fetch a user for the given login name.","params":[{"name":"name","description":"the login name to check","type":[[["string"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":115,"file":"TwitchManager.js","path":"app/managers"}},{"name":"fetchUptime","description":"Fetch the uptime for the specified stream.","params":[{"name":"user","description":"the user to fetch uptime for","optional":true,"default":"ApplicationOptions.twitch.channel?.name","type":[[["string"]]]}],"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":125,"file":"TwitchManager.js","path":"app/managers"}}],"meta":{"line":13,"file":"TwitchManager.js","path":"app/managers"}},{"name":"Requester","description":"Not a real class, a proxy for api routes.","props":[{"name":"[param]","description":"A part of the url path, ending with one of {@link HTTPMethod}","readonly":true,"type":[[["Requester"]],[["function"]]],"meta":{"line":23,"file":"APIRouter.js","path":"app/util"}}],"methods":[{"name":"HTTPMethod","description":"The method to use in the fetch request, see {@link HTTPMethod}","params":[{"name":"data","description":"the data to pass to the request","type":[[["RequestData"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":40,"file":"APIRouter.js","path":"app/util"}},{"name":"*","description":"A variable part of the url path","params":[{"name":"routeKey","description":"the key to add to the url, any number of these is accepted","type":[[["string"]]]}],"meta":{"line":47,"file":"APIRouter.js","path":"app/util"}}],"meta":{"line":17,"file":"APIRouter.js","path":"app/util"}},{"name":"DiscordUtil","description":"Stores various discord specific utilities","methods":[{"name":"confirmAction","description":"Confirm a users desire to perform an action","scope":"static","params":[{"name":"message","description":"the message you are confirming in response to","type":[[["Message"]],[["Interaction"]]]},{"name":"text","description":"the text to say in the confirmation","type":[[["string"]]]},{"name":"time","description":"how long to wait for a reaction","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":17,"file":"DiscordUtil.js","path":"app/util"}},{"name":"isSnowflake","description":"Checks whether a string is a valid discord snowflake","scope":"static","params":[{"name":"potentialSnoflake","description":"the string to check for a snwoflake","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":70,"file":"DiscordUtil.js","path":"app/util"}},{"name":"isGuild","description":"Test a guild ID against the setting for the given key","scope":"static","params":[{"name":"id","description":"the id of the guild to test","type":[[["string"]]]},{"name":"slugOrId","description":"the guild name or id(s)","type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]]},{"name":"settings","description":"the app settings for checking slugs","type":[[["Collection"]]]}],"returns":[[["boolean"]]],"meta":{"line":81,"file":"DiscordUtil.js","path":"app/util"}},{"name":"isChannel","description":"Test a channel ID against the setting for the given key","scope":"static","params":[{"name":"id","description":"the id of the channel to test","type":[[["string"]]]},{"name":"slugOrId","description":"the channel name or id(s)","type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]]},{"name":"settings","description":"the app settings for checking slugs","type":[[["Collection"]]]}],"returns":[[["boolean"]]],"meta":{"line":97,"file":"DiscordUtil.js","path":"app/util"}},{"name":"isUser","description":"Test a user ID against the setting for the given key","scope":"static","params":[{"name":"id","description":"the id of the user to test","type":[[["string"]]]},{"name":"slugOrId","description":"the user name or id(s)","type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]]},{"name":"settings","description":"the app settings for checking slugs","type":[[["Collection"]]]}],"returns":[[["boolean"]]],"meta":{"line":113,"file":"DiscordUtil.js","path":"app/util"}}],"meta":{"line":6,"file":"DiscordUtil.js","path":"app/util"}},{"name":"HTTPUtil","description":"Stores various http specific utilities","meta":{"line":6,"file":"HTTPUtil.js","path":"app/util"}},{"name":"Logging","description":"Not a real class, a proxy for the {@link LogManager} levels","props":[{"name":"[level]","description":"The level of log to make, one of {@link LogLevel}","readonly":true,"type":[[["Logging"]]],"meta":{"line":13,"file":"LogRouter.js","path":"app/util"}}],"methods":[{"name":"*","description":"Calls the logger at the previously specified level, if none was specified, this is `info`","params":[{"name":"source","description":"the module sourcing this log","type":[[["Module"]]]},{"name":"message","description":"the message to output","type":[[["string"]]]}],"meta":{"line":21,"file":"LogRouter.js","path":"app/util"}}],"meta":{"line":7,"file":"LogRouter.js","path":"app/util"}},{"name":"TwitchUtil","description":"Stores various twitch specific utilities","methods":[{"name":"handle","description":"Gets the user display name or username for a twitch user object","scope":"static","params":[{"name":"user","description":"the user to get from","type":[[["Object"]]]}],"returns":[[["string"]]],"meta":{"line":16,"file":"TwitchUtil.js","path":"app/util"}},{"name":"isBroadcaster","description":"Determines whether the defined user is the broadcaster of the specified channel","scope":"static","params":[{"name":"user","description":"a twitch user object","type":[[["Object"]]]},{"name":"channel","description":"a twitch channel object","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":26,"file":"TwitchUtil.js","path":"app/util"}},{"name":"isPrivileged","description":"Determines whether the defined user is a mod in the specified channel","scope":"static","params":[{"name":"user","description":"a twitch user object","type":[[["Object"]]]},{"name":"channel","description":"a twitch channel object","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":36,"file":"TwitchUtil.js","path":"app/util"}},{"name":"isVip","description":"Determines whether the defined user is a vip using their badges","scope":"static","params":[{"name":"user","description":"a twitch user object","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":48,"file":"TwitchUtil.js","path":"app/util"}}],"meta":{"line":6,"file":"TwitchUtil.js","path":"app/util"}},{"name":"UtilManager","description":"Stores various general purpose utilities for the application","props":[{"name":"constants","description":"An object containing all the constant data","scope":"static","access":"private","readonly":true,"type":[[["Object"]]],"meta":{"line":21,"file":"UtilManager.js","path":"app/util"}},{"name":"discord","description":"An object containing all discord utilities","scope":"static","readonly":true,"type":[[["DiscordUtil"]]],"meta":{"line":30,"file":"UtilManager.js","path":"app/util"}},{"name":"http","description":"An object containing all http utilities","scope":"static","readonly":true,"type":[[["HTTPUtil"]]],"meta":{"line":39,"file":"UtilManager.js","path":"app/util"}},{"name":"twitch","description":"An object containing all twich utilities","scope":"static","readonly":true,"type":[[["TwitchUtil"]]],"meta":{"line":48,"file":"UtilManager.js","path":"app/util"}}],"methods":[{"name":"clamp","description":"Restricts a numeric value to be between to numbers","scope":"static","params":[{"name":"value","description":"the number to clamp","type":[[["number"]]]},{"name":"min","description":"the minimum desired value","type":[[["number"]]]},{"name":"max","description":"the maximum desired value","type":[[["number"]]]}],"returns":[[["number"]]],"meta":{"line":59,"file":"UtilManager.js","path":"app/util"}},{"name":"collect","description":"Organizes an array of items into a discord collection based on a key","scope":"static","params":[{"name":"map","description":"the collection to arrange the data in","type":[[["Collection"]]]},{"name":"items","description":"the data to rearrange","type":[[["Array","<"],["Object",">"]]]},{"name":"key","description":"the element key to use as the identifier in the collection","type":[[["string"]]]},{"name":"secondaryKey","description":"the second half of a hyphenated key","optional":true,"type":[[["string"]]]},{"name":"val","description":"only store a specific value (secondaryKey must be set (can be false) to use this)","optional":true,"default":null,"type":[[["string"]]]}],"meta":{"line":71,"file":"UtilManager.js","path":"app/util"}},{"name":"format","description":"Replaces parameters wrapped in {} with values","scope":"static","params":[{"name":"template","description":"the message to format with additional information","type":[[["string"]]]},{"name":"values","description":"an object containing key value pairs of what to replace and what it is replaced with","type":[[["Object"]]]}],"returns":[[["string"]]],"meta":{"line":87,"file":"UtilManager.js","path":"app/util"}},{"name":"humanBytes","description":"Makes a number of bytes easier to read for humans","scope":"static","params":[{"name":"bytes","description":"the raw number of bytes","type":[[["number"]]]}],"returns":[[["string"]]],"meta":{"line":101,"file":"UtilManager.js","path":"app/util"}},{"name":"humanDate","description":"Formats a date to the form `Month #, ####`","scope":"static","params":[{"name":"time","description":"the date to transform","type":[[["Date"]]]}],"returns":[[["string"]]],"meta":{"line":115,"file":"UtilManager.js","path":"app/util"}},{"name":"humanDuration","description":"Formats a time in milliseconds to a human readable form","scope":"static","params":[{"name":"diff","description":"the time to reformat","type":[[["number"]]]}],"returns":[[["string"]]],"meta":{"line":124,"file":"UtilManager.js","path":"app/util"}},{"name":"jitter","description":"Generates a random value between the specified values","scope":"static","params":[{"name":"min","description":"the minimum end of the allowed range","type":[[["number"]]]},{"name":"max","description":"the maximum end of the allowed range","type":[[["number"]]]}],"returns":[[["number"]]],"meta":{"line":137,"file":"UtilManager.js","path":"app/util"}},{"name":"mentionable","description":"Formats a twitch message to start with a mention if set","scope":"static","params":[{"name":"mention","description":"whether or not to mention the target","type":[[["boolean"]]]},{"name":"target","description":"the person to send the message to","type":[[["string"]]]},{"name":"message","description":"the message to augment","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":148,"file":"UtilManager.js","path":"app/util"}},{"name":"mergeDefault","description":"Sets default properties on an object that aren't already specified.","scope":"static","access":"private","params":[{"name":"def","description":"Default properties","type":[[["Object"]]]},{"name":"given","description":"Object to assign defaults to","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":159,"file":"UtilManager.js","path":"app/util"}},{"name":"relativeTime","description":"Gets the relative amount of time since a specified time","scope":"static","params":[{"name":"then","description":"the time to get the difference from now as","type":[[["Moment"]],[["string"]],[["number"]],[["Date"]]]},{"name":"specificity","description":"the maximum units to display","default":2,"type":[[["number"]]]},{"name":"preferHours","description":"whether to use hours instead of days","default":false,"type":[[["boolean"]]]}],"returns":[[["string"]]],"meta":{"line":178,"file":"UtilManager.js","path":"app/util"}},{"name":"usage","description":"Formats an array of usages in a readable form","scope":"static","params":[{"name":"value","description":"all of the available usage types","type":[[["string"]],[["Array","<"],["string",">"]]]},{"name":"prefix","description":"the prefix for the command","type":[[["string"]]]},{"name":"command","description":"the command name","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":199,"file":"UtilManager.js","path":"app/util"}},{"name":"variableInterval","description":"A function caller that repatedly calls after a pseudo random time","scope":"static","params":[{"name":"callback","description":"the function to call after each delay","type":[[["function"]]]},{"name":"delay","description":"the function that determines a delay time (returns number)","type":[[["function"]]]},{"name":"wrapper","description":"a function called that handles the restart and callback of the interval","optional":true,"type":[[["function"]]]}],"returns":[[["self"]]],"meta":{"line":212,"file":"UtilManager.js","path":"app/util"}}],"meta":{"line":10,"file":"UtilManager.js","path":"app/util"}}],"interfaces":[],"typedefs":[{"name":"IRCCommandEditProperty","description":"The type of properties that can be edited for an IRC command:\n* count\n* output\n* restriction\n* rename","type":[[["string"]]],"meta":{"line":42,"file":"ircCommands.js","path":"app/database/tables"}},{"name":"RoomData","description":"The data for any room:","type":[[["Object"]]],"params":[{"name":"id","description":"the id of the room","type":[[["string"]]]},{"name":"name","description":"the display name of the room","type":[[["string"]]]},{"name":"owner","description":"the snowflake of the room owner","type":[[["string"]]]},{"name":"playerCount","description":"the max number of players allowed","type":[[["number"]]]},{"name":"code","description":"the current code for the room","type":[[["string"]]]},{"name":"players","description":"an array of snowflakes for current players","type":[[["Array","<"],["string",">"]]]},{"name":"waiting","description":"an array of snowflakes for people in the waiting room","type":[[["Array","<"],["string",">"]]]},{"name":"lastChannelID","description":"the snowflake for the channel the last message of this room was sent in","type":[[["string"]]]},{"name":"lastMessageID","description":"the snowflake for the last message this room was sent as","type":[[["string"]]]}],"meta":{"line":36,"file":"rooms.js","path":"app/database/tables"}},{"name":"CommandData","description":"Data that defines a command\nChecks are done in the following order:\n* `Guild`\n* `Channel`\n* `User`\n* `Role`\n* `Permissions`\n\n e.g. if a command is executed and has role and channel set, if it is not sent in the channel specified, it will not run","type":[[["Object"]]],"params":[{"name":"name","description":"the name of the command (used to register the command as useable)","type":[[["string"]]]},{"name":"aliases","description":"a list of aliases that can be used to call this command","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"description","description":"what the command does","optional":true,"type":[[["string"]]]},{"name":"usage","description":"an array of possible ways to use the command (for legacy help)","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"guild","description":"restrict the command to a specific guild","optional":true,"type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]]},{"name":"channel","description":"restrict the command to a specific channel (or set of channels if specified in database)","optional":true,"type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]]},{"name":"role","description":"restrict the command to a specific role (those with `Manage Roles` bypass this)","optional":true,"type":[[["string"]]]},{"name":"permissions","description":"restrict the command to users with certain permissions","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"user","description":"restrict the command to a specific user","optional":true,"type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]]},{"name":"args","description":"whether arguments are required (set to false to provide a custom error message handled in command)","optional":true,"type":[[["boolean"]]]}],"meta":{"line":8,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"AppplicationCommandData","description":"Data that defines an application command interaction\nIf restrictions are present they are checked in the following order:\n* `Channel`\n* `Role`\n* `Permissions`\n\n e.g. if a command is executed and has role and channel set, if it is not sent in the channel specified, it will not run\n\nRestrictions on guild or user level should be done with discords built in method.\nIf role names are not the appropriate way to handle your restriction needs, again use discords built in method.","type":[[["Object"]]],"params":[{"name":"definition","description":"the definition of the interaction (the data sent to discord)","type":[[["Object"]]]},{"name":"guilds","description":"register the interaction to specific guild(s)","optional":true,"type":[[["Snowflake"]],[["Array","<"],["Snowflake",">"]]]},{"name":"permissions","description":"restrict the interaction to users with certain permissions","optional":true,"type":[[["PermissionResolvable"]]]}],"meta":{"line":10,"file":"BaseAppCommand.js","path":"app/discord/interactions/applicationCommands"}},{"name":"InteractionDefinition","description":"Data that defines an interaction","type":[[["Object"]]],"params":[{"name":"definition","description":"the definition of the interaction (the data sent to discord)","type":[[["Object"]]]},{"name":"guilds","description":"register the interaction to specific guild(s)","optional":true,"type":[[["Snowflake"]],[["Array","<"],["Snowflake",">"]]]},{"name":"permissions","description":"restrict the interaction to users with certain permissions","optional":true,"type":[[["PermissionResolvable"]]]}],"meta":{"line":8,"file":"BaseInteraction.js","path":"app/discord/interactions"}},{"name":"InteractionType","description":"One of\n* `applicationCommands`","type":[[["string"]]],"meta":{"line":7,"file":"InteractionManager.js","path":"app/discord/interactions"}},{"name":"Interactions","description":"The interactions by type","type":[[["Object"]]],"props":[{"name":"applicationCommands","description":"the appliction (slash) command interactions","type":[[["Collection","<"],["string",", "],["BaseAppCommand",">"]]]}],"meta":{"line":27,"file":"InteractionManager.js","path":"app/discord/interactions"}},{"name":"RequestData","description":"Data passed to any request","type":[[["Object"]]],"params":[{"name":"params","description":"parameters to put in the url","optional":true,"type":[[["Object"]]]},{"name":"data","description":"for put, post, delete, and patch, the data to pass","optional":true,"type":[[["Object"]]]},{"name":"responseType","description":"the expected response type","optional":true,"default":"json","type":[[["string"]]]},{"name":"headers","description":"the headers to send with the response CAUTION: this *can* overide default headers","optional":true,"type":[[["Object"]]]}],"meta":{"line":31,"file":"APIRouter.js","path":"app/util"}},{"name":"RespondData","description":"Data used to respond to a request if responds = true in RequestData","type":[[["Object"]]],"props":[{"name":"statusCode","description":"the status code to return","type":[[["Number"]]]},{"name":"headers","description":"the headers to return","optional":true,"type":[[["Object"]]]},{"name":"data","description":"the data to respond with","optional":true,"type":[["*"]]}],"meta":{"line":65,"file":"BaseRequest.js","path":"app/http/requests"}},{"name":"TwitchCommandData","description":"Data that defines a Twitch command","type":[[["Object"]]],"params":[{"name":"name","description":"the name of the command (used to register the command as useable)","type":[[["string"]]]}],"meta":{"line":8,"file":"TwitchCommand.js","path":"app/irc/commands"}},{"name":"TableName","description":"The name of a table from the TableManager","type":[[["string"]]],"meta":{"line":40,"file":"IrcManager.js","path":"app/managers"}},{"name":"HTTPMethod","description":"An HTTP fetch method, one of:\n* get\n* patch\n* post\n* put\n* delete","type":[[["string"]]],"meta":{"line":7,"file":"APIRouter.js","path":"app/util"}},{"name":"ApplicationOptions","description":"Options for the application","type":[[["Object"]]],"props":[{"name":"database","description":"options for database","type":[[["DatabaseOptions"]]]},{"name":"debug","description":"whether the application is in debug mode","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableDiscord","description":"whether to disable discord (note: most of the functionality is dependent on discord)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableIRC","description":"whether to disable Twitch IRC","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableServer","description":"whether to disable the built in HTTP server","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableTwitch","description":"whether to completely disable twitch (forces disableIRC to true)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"donate","description":"the donation link for your bot","optional":true,"default":"https://www.paypal.me/corncierge","type":[[["string"]]]},{"name":"discord","description":"options for discord (does not need to be present if disableDiscord is true)","type":[[["DiscordOptions"]]]},{"name":"http","description":"options for http (does not need to be present if disableServer is true)","optional":true,"type":[[["HTTPOptions"]]]},{"name":"log","description":"options for logging","type":[[["LogOptions"]]]},{"name":"name","description":"the name of the bot (used in help command)","optional":true,"default":"Corncierge","type":[[["string"]]]},{"name":"twitch","description":"options for twitch (does not need to be present if disableTwitch is true)","type":[[["TwitchOptions"]]]},{"name":"website","description":"the website to link to for more information on your bot","optional":true,"default":"https://www.corncierge.com","type":[[["string"]]]},{"name":"youtubeToken","description":"the token used for connecting to youtubes API (for music bot) (YOUTUBE_TOKEN in env if not provided)","optional":true,"type":[[["string"]]]}],"meta":{"line":3,"file":"Constants.js","path":"app/util"}},{"name":"DatabaseOptions","description":"The database options","type":[[["Object"]]],"props":[{"name":"database","description":"the name of the database within the server to use","type":[[["string"]]]},{"name":"host","description":"the domain / ip of the database","type":[[["string"]]]},{"name":"password","description":"the password used to log in to the database (DATABASE_PASSWORD in env if not provided)","type":[[["string"]]]},{"name":"port","description":"the port to attempt connections on","optional":true,"default":3306,"type":[[["number"]]]},{"name":"timezone","description":"the timezone to use","optional":true,"default":"Z","type":[[["string"]]]},{"name":"user","description":"the user to log in as (DATABASE_USER in env if not provided)","type":[[["string"]]]}],"meta":{"line":31,"file":"Constants.js","path":"app/util"}},{"name":"DisableableCommands","description":"A disableable discord command, the top level is groups which disable the items within as well\n* `all` - disables all built in commands\n* `gaming`\n * `random`\n * `room`\n* `general`\n * `help`\n* `management`\n * `eval`\n * `setstatus`\n* `moderation`\n * `clear`\n * `moveall`\n * `muteall`\n * `nuke`\n * `randommove`\n * `unmuteall`\n* `music` - some sub items are not shown as they should not be disabled without disabling the whole group\n * `loop`\n * `nowplaying`\n * `remove`\n * `shuffle`\n * `skip`\n * `skipall`\n * `skipto`\n * `volume`\n* `roles`\n * `autorole`\n * `color`\n * `colormanager`\n * `makeme`\n * `makemenot`\n * `reactionroles`\n * `rolemanager`\n * `voceroles`\n* `twitch`\n * `commandlist`\n * `commands`","type":[[["string"]]],"meta":{"line":47,"file":"Constants.js","path":"app/util"}},{"name":"DiscordOptions","description":"The options for the discord handler","type":[[["Object"]]],"props":[{"name":"clientOptions","description":"the options to pass to the djs client","optional":true,"type":[[["discordjsClientOptions"]]]},{"name":"disabledCommands","description":"a list of commands to disable, for slash commands, this only needs to be set when registering","optional":true,"type":[[["Array","<"],["DisableableCommands",">"]]]},{"name":"token","description":"the token used to login to the bot application (DISCORD_TOKEN in env if not provided)","type":[[["string"]]]}],"meta":{"line":89,"file":"Constants.js","path":"app/util"}},{"name":"HTTPOptions","description":"The options for the built in web server","type":[[["Object"]]],"props":[{"name":"port","description":"the port to listen on","optional":true,"default":80,"type":[[["number"]]]},{"name":"useHttps","description":"whether to use http or https","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"httpsOptions","description":"options to pass to the createServer call of https, must be provided when useHttps = true","optional":true,"type":[[["httpsServerOptions"]]]},{"name":"httpsOptions.keyLocation","description":"the location of the private key for https in PEM format","type":[[["string"]]]},{"name":"httpsOptions.certLocation","description":"the location of the certificate chains for https in PEM format","type":[[["string"]]]}],"meta":{"line":103,"file":"Constants.js","path":"app/util"}},{"name":"LogOptions","description":"The logging options","type":[[["Object"]]],"props":[{"name":"maxLevel","description":"the maximum level of logging to allow in the output file","optional":true,"default":"error","type":[[["LogLevel"]]]},{"name":"outputFile","description":"the location of the output file, either relative or direct path","type":[[["string"]]]},{"name":"verbose","description":"whether to log verbose to the console","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"webhookToken","description":"the token for the logging webhook (LOG_WEBHOOK_TOKEN in env if not provided)","type":[[["string"]]]}],"meta":{"line":117,"file":"Constants.js","path":"app/util"}},{"name":"TwitchOptions","description":"The options for the twitch handler","type":[[["Object"]]],"props":[{"name":"api","description":"Base url of the api","optional":true,"default":"https://api.twitch.tv/kraken","type":[[["string"]]]},{"name":"authapi","description":"Base url for the authentication api","optional":true,"default":"https://id.twitch.tv/oauth2","type":[[["string"]]]},{"name":"botCode","description":"the code used to generate tokens for the bot user, must have token or code in the database if not provided","optional":true,"type":[[["string"]]]},{"name":"channel.id","description":"the channel id for the 'default' listening twitch channel","optional":true,"type":[[["string"]]]},{"name":"channel.name","description":"the channel name for the 'default' listening twitch channel","optional":true,"type":[[["string"]]]},{"name":"clientID","description":"the id of the api application uses (TWITCH_CLIENT_ID in env if not provided)","type":[[["string"]]]},{"name":"clientSecret","description":"the client secret for the api application (TWITCH_CLIENT_SECRET in env if not provided)","type":[[["string"]]]},{"name":"irc","description":"options for the irc client","optional":true,"type":[[["IRCOptions"]]]},{"name":"ircThrottle","description":"options for throttling irc commands","optional":true,"type":[[["ThrottleOptions"]]]},{"name":"redirectUri","description":"a registered redirect URI for your application","type":[[["string"]]]}],"meta":{"line":130,"file":"Constants.js","path":"app/util"}},{"name":"IRCConnectionOptions","description":"IRC connection options for tmi.js","type":[[["Object"]]],"props":[{"name":"server","description":"the server to connect to","optional":true,"default":"irc-ws.chat.twitch.tv","type":[[["string"]]]},{"name":"port","description":"the port to connect on","optional":true,"default":80,"type":[[["number"]]]},{"name":"reconnect","description":"whether to attempt reconnections automatically","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"maxReconnectAttempts","description":"max number of reconnect attempts","optional":true,"default":"Infinity","type":[[["number"]]]},{"name":"maxReconnectInterval","description":"max time to delay between reconnects","optional":true,"default":30000,"type":[[["number"]]]},{"name":"reconnectDecay","description":"the rate of increase of the reconnect delay","optional":true,"default":1.5,"type":[[["number"]]]},{"name":"reconnectInterval","description":"number of ms before attempting to reconnect","optional":true,"default":1000,"type":[[["number"]]]},{"name":"secure","description":"Use SSL/HTTPS (overrides prt to 443)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"timeout","description":"how long to wait for response from server","optional":true,"default":9999,"type":[[["number"]]]}],"meta":{"line":151,"file":"Constants.js","path":"app/util"}},{"name":"IRCOptions","description":"IRC connection options (these are tmi.js options)","type":[[["Object"]]],"props":[{"name":"connection","description":"the options for the IRC Connection","optional":true,"type":[[["IRCConnectionOptions"]]]},{"name":"options.debug","description":"whether the irc client is in debug mode","optional":true,"type":[[["boolean"]]]},{"name":"identity.username","description":"the username of the bot that posts in chat","optional":true,"type":[[["string"]]]},{"name":"identity.password","description":"the password or a password generator function","optional":true,"default":"auth.getAccessToken","type":[[["string"]],[["function"]]]},{"name":"channels","description":"list of channels to join on startup","optional":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":165,"file":"Constants.js","path":"app/util"}},{"name":"ThrottleOptions","description":"Options for throttling commands in IRC","type":[[["Object"]]],"props":[{"name":"burst","description":"how many time to allow a command in short bursts","optional":true,"default":1,"type":[[["number"]]]},{"name":"rate","description":"the number of actions renewed per window","optional":true,"default":1,"type":[[["number"]]]},{"name":"window","description":"the time frame which rate and burst act in","optional":true,"default":30000,"type":[[["number"]]]},{"name":"overrides","description":"an object linking command names to their burst, rate, and window overrides","optional":true,"type":[[["Object"]]]}],"meta":{"line":180,"file":"Constants.js","path":"app/util"}},{"name":"Colors","description":"Predefined custom colors for use anywhere\n* `BRIGHT_GREEN`\n* `BRIGHT_PINK`\n* `BRIGHT_PURPLE`\n* `CYAN`\n* `DEEP_GOLD`\n* `SALMON`\n* `TWITCH`","type":[[["Object"]]],"meta":{"line":196,"file":"Constants.js","path":"app/util"}},{"name":"LogLevel","description":"A level of logging based on the following:\n* fatal - a critical error that ends the application\n* critical - potentially breaking issue\n* error - high priority non-breaking issue\n* warn - non-breaking issue\n* info - general information\n* debug - highly detailed debug information\n* verbose - clutters the log","type":[[["string"]]],"meta":{"line":287,"file":"Constants.js","path":"app/util"}}],"externals":[]}