{"meta":{"generator":"0.9.0","format":20,"date":1614594892188},"custom":null,"classes":[{"name":"Application","description":"The application container.","access":"public","construct":{"name":"Application","description":"Create a new application instance.","params":[{"name":"options","description":"the options for the application","optional":true,"type":[[["ApplicationOptions"]]]}]},"props":[{"name":"debug","description":"Whether the application is in debug mode.","access":"private","type":[[["boolean"]]],"meta":{"line":32,"file":"Application.js","path":"app"}},{"name":"twitch","description":"The Twitch manager for the application.","type":[[["TwitchManager"]]],"meta":{"line":39,"file":"Application.js","path":"app"}},{"name":"logger","description":"The log manager for the application.","access":"private","type":[[["LogManager"]]],"meta":{"line":47,"file":"Application.js","path":"app"}},{"name":"settings","description":"The settings for the application, mapped by name.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":53,"file":"Application.js","path":"app"}},{"name":"streaming","description":"The streaming settings for the application, mapped by name.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":59,"file":"Application.js","path":"app"}},{"name":"discord","description":"The Discord manager for the application.","type":[[["DiscordManager"]]],"meta":{"line":66,"file":"Application.js","path":"app"}},{"name":"http","description":"The HTTP Server manager for the application.","type":[[["HTTPManager"]]],"meta":{"line":74,"file":"Application.js","path":"app"}},{"name":"database","description":"The database manager for the application.","type":[[["DatabaseManager"]]],"meta":{"line":81,"file":"Application.js","path":"app"}},{"name":"ending","description":"True when intentionally ending the application so subapplications do not restart","access":"private","type":[[["boolean"]]],"meta":{"line":88,"file":"Application.js","path":"app"}},{"name":"log","description":"Logging shortcut. Logs to `info` by default. Other levels are properties.","readonly":true,"type":[[["Logging"]]],"meta":{"line":96,"file":"Application.js","path":"app"}}],"methods":[{"name":"boot","description":"Boot the application.","access":"public","async":true,"meta":{"line":104,"file":"Application.js","path":"app"}},{"name":"setOptions","description":"Validate and set the configuration options for the application.","access":"private","params":[{"name":"options","description":"the options to validate","type":[[["Object"]]]}],"meta":{"line":152,"file":"Application.js","path":"app"}},{"name":"formatOptions","description":"Formats options in a useable format for the application","access":"private","params":[{"name":"options","description":"the pre validated options","type":[[["Object"]]]}],"returns":{"types":[[["Object"]]],"description":"formatted options"},"meta":{"line":259,"file":"Application.js","path":"app"}},{"name":"setSettings","description":"Cache all database settings for the application.","access":"private","returns":[[["Promise"]]],"meta":{"line":317,"file":"Application.js","path":"app"}},{"name":"setStreaming","description":"Cache all database streaming settings for the application.","access":"private","returns":[[["Promise"]]],"meta":{"line":332,"file":"Application.js","path":"app"}}],"meta":{"line":18,"file":"Application.js","path":"app"}},{"name":"BaseTable","description":"Represents API methods for any database table","abstract":true,"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":7,"file":"BaseTable.js","path":"app/database/tables"}},{"name":"botLogTable","description":"Contains API methods for the botLog database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"add","description":"Add a bot-initiated log entry.","params":[{"name":"values","description":"extra parameters to pass to the query","variable":true,"type":[["*"]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":15,"file":"botLog.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"botLog.js","path":"app/database/tables"}},{"name":"colorManagerTable","description":"Contains API methods for the colorManager database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get color manager settings.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"colorManager.js","path":"app/database/tables"}},{"name":"add","description":"Add a guild to the colormanager","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"colorManager.js","path":"app/database/tables"}},{"name":"delete","description":"Removes a guild from the colormanager","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"colorManager.js","path":"app/database/tables"}},{"name":"edit","description":"Edit the color manager for a guild","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"roles","description":"an object with a channel id associated with an array of role names","type":[[["Object"]]]},{"name":"snowflakes","description":"an array containing all the snowflakes for the color roles","type":[[["Array","<"],["string",">"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":43,"file":"colorManager.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"colorManager.js","path":"app/database/tables"}},{"name":"humanLogTable","description":"Contains API methods for the humanLog database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"add","description":"Add a human-initiated log entry.","params":[{"name":"values","description":"extra parameters to pass to the query","variable":true,"type":[["*"]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":15,"file":"humanLog.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"humanLog.js","path":"app/database/tables"}},{"name":"ircCommandsTable","description":"Contains API methods for the ircCommands database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get all IRC commands.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"ircCommands.js","path":"app/database/tables"}},{"name":"add","description":"Add an IRC command.","params":[{"name":"input","description":"what the command responds to","type":[[["string"]]]},{"name":"output","description":"what to display as an output when the command is fired","type":[[["string"]]]},{"name":"prefix","description":"whether or not a prefix is required for this command","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":27,"file":"ircCommands.js","path":"app/database/tables"}},{"name":"delete","description":"Delete an IRC command.","params":[{"name":"id","description":"the id of the command to delete","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":39,"file":"ircCommands.js","path":"app/database/tables"}},{"name":"edit","description":"Edits an IRC command.","params":[{"name":"property","description":"the property of the command to edit","type":[[["IRCCommandEditProperty"]]]},{"name":"id","description":"the id of the command to update","type":[[["number"]]]},{"name":"updated","description":"the new value for the parameter","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":59,"file":"ircCommands.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"ircCommands.js","path":"app/database/tables"}},{"name":"ircFiltersTable","description":"Contains API methods for the ircFilters database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get all IRC moderation filters.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"ircFilters.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"ircFilters.js","path":"app/database/tables"}},{"name":"jokesTable","description":"Contains API methods for the jokes database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get all jokes.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"jokes.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"jokes.js","path":"app/database/tables"}},{"name":"newMemberRoleTable","description":"Contains API methods for the newMemberRole database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get New member role settings.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"newMemberRole.js","path":"app/database/tables"}},{"name":"add","description":"Add a new member role setting","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"newMemberRole.js","path":"app/database/tables"}},{"name":"delete","description":"Removes a new member role setting","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"newMemberRole.js","path":"app/database/tables"}},{"name":"edit","description":"Updates a new member role setting","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"roleID","description":"the id of the role that is assigned","type":[[["string"]]]},{"name":"delayTime","description":"the delay time in milliseconds before the role is added","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":43,"file":"newMemberRole.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"newMemberRole.js","path":"app/database/tables"}},{"name":"prefixesTable","description":"Contains API methods for the prefixes database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get prefixes.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"prefixes.js","path":"app/database/tables"}},{"name":"add","description":"Add a guild to prefixes","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"prefixes.js","path":"app/database/tables"}},{"name":"delete","description":"Remove a guild from prefixes","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"prefixes.js","path":"app/database/tables"}},{"name":"edit","description":"Edit the prefix for a guild","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"prefix","description":"the new prefix to use","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":42,"file":"prefixes.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"prefixes.js","path":"app/database/tables"}},{"name":"randomChannelsTable","description":"Contains API methods for the randomChannels database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get random channel data.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"randomChannels.js","path":"app/database/tables"}},{"name":"add","description":"Add a guild to random channels","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":{"types":[[["Promise"]]],"description":"<void>"},"meta":{"line":23,"file":"randomChannels.js","path":"app/database/tables"}},{"name":"delete","description":"Remove a guild from random channels","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"randomChannels.js","path":"app/database/tables"}},{"name":"edit","description":"Edit the random channels for a guild","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"toChannel","description":"the snowflake id of the stored destinaton channel","type":[[["string"]]]},{"name":"fromChannel","description":"the snowflake id of the stored source channel","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":43,"file":"randomChannels.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"randomChannels.js","path":"app/database/tables"}},{"name":"reactionRolesTable","description":"Contains API methods for the reactionRoles database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get reaction manager settings.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"reactionRoles.js","path":"app/database/tables"}},{"name":"add","description":"Add a guild to the reactionmanager","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"reactionRoles.js","path":"app/database/tables"}},{"name":"delete","description":"Removes a guild from the reactionmanager","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"reactionRoles.js","path":"app/database/tables"}},{"name":"edit","description":"Edit the reaction role manager for a guild","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"channelID","description":"the stored snowflake of the channel where the reaction message is","type":[[["string"]]]},{"name":"messageID","description":"the store snowflake of the message that is reacted to","type":[[["string"]]]},{"name":"roles","description":"an object containing key value pairs of emote snowflakes and an array of role snowflakes","type":[[["Object"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":44,"file":"reactionRoles.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"reactionRoles.js","path":"app/database/tables"}},{"name":"roleManagerTable","description":"Contains API methods for the roleManager database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get role manager settings.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"roleManager.js","path":"app/database/tables"}},{"name":"add","description":"Add a guild to the rolemanager","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"roleManager.js","path":"app/database/tables"}},{"name":"delete","description":"Removes a guild from the rolemanager","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"roleManager.js","path":"app/database/tables"}},{"name":"edit","description":"Edit the role manager for a guild","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"addRoles","description":"an object containing key value pairs of channel snowflakes and an array of role snowflakes","type":[[["Object"]]]},{"name":"removeRoles","description":"an object containing key value pairs of channel snowflakes and an array of role snowflakes","type":[[["Object"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":43,"file":"roleManager.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"roleManager.js","path":"app/database/tables"}},{"name":"roomsTable","description":"Contains API methods for the rooms database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get rooms.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"rooms.js","path":"app/database/tables"}},{"name":"add","description":"Add a room to the room manager","params":[{"name":"id","description":"the room id (guildID-room) to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"rooms.js","path":"app/database/tables"}},{"name":"delete","description":"Remove a room from the room manager","params":[{"name":"id","description":"the room id (guildID-room) to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"rooms.js","path":"app/database/tables"}},{"name":"edit","description":"Edit a room","params":[{"name":"id","description":"the room id (guildID-room) to edit in the database","type":[[["string"]]]},{"name":"data","description":"the updated data for the room","type":[[["RoomData"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":56,"file":"rooms.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"rooms.js","path":"app/database/tables"}},{"name":"settingsTable","description":"Contains API methods for the settings database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get all settings","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"settings.js","path":"app/database/tables"}},{"name":"add","description":"Add a setting","params":[{"name":"name","description":"the name of the setting to add","type":[[["string"]]]},{"name":"value","description":"the value of the new setting","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":24,"file":"settings.js","path":"app/database/tables"}},{"name":"edit","description":"Edit a setting","params":[{"name":"name","description":"the name of the setting to edit","type":[[["string"]]]},{"name":"value","description":"the new value for the setting","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":34,"file":"settings.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"settings.js","path":"app/database/tables"}},{"name":"streamingTable","description":"Contains API methods for the streaming database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get streaming settings","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"streaming.js","path":"app/database/tables"}},{"name":"edit","description":"Update streaming last mesage","params":[{"name":"key","description":"the stream user to edit","type":[[["string"]]]},{"name":"messageID","description":"the snowflake of the last go live message","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":24,"file":"streaming.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"streaming.js","path":"app/database/tables"}},{"name":"TableManager","description":"Stores the tables for a database","props":[{"name":"socket","description":"The database manager that handles these tables","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":10,"file":"TableManager.js","path":"app/database/tables"}},{"name":"[TableName]","description":"Stores the registered table associated with TableName","type":[[["BaseTable"]]],"meta":{"line":18,"file":"TableManager.js","path":"app/database/tables"}},{"name":"discord","description":"An array of database tables, all of which deal with discord, are mapped by guildID, and are cached normally","type":[[["Array","<"],["BaseTable",">"]]],"meta":{"line":28,"file":"TableManager.js","path":"app/database/tables"}}],"methods":[{"name":"register","description":"Registers a table in the manager for use throughout the application","params":[{"name":"table","description":"the table to register","type":[[["BaseTable"]]]},{"name":"type","description":"the type of this table, used to place in relevant arrays","optional":true,"type":[[["string"]]]}],"meta":{"line":53,"file":"TableManager.js","path":"app/database/tables"}}],"meta":{"line":8,"file":"TableManager.js","path":"app/database/tables"}},{"name":"voiceRolesTable","description":"Contains API methods for the voiceRoles database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get voice role settings.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"voiceRoles.js","path":"app/database/tables"}},{"name":"add","description":"Add a guild to the voicemanager","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"voiceRoles.js","path":"app/database/tables"}},{"name":"delete","description":"Remove a guild from the voicel role manager","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"voiceRoles.js","path":"app/database/tables"}},{"name":"edit","description":"Edit the voice role manager for a guild","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"data","description":"an object containing key value pairs of role snowflakes and an array of channel snowflakes","type":[[["Object"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":42,"file":"voiceRoles.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"voiceRoles.js","path":"app/database/tables"}},{"name":"volumesTable","description":"Contains API methods for the volumes database table","extends":[[["BaseTable"]]],"props":[{"name":"socket","description":"The database manager that this table resides in","type":[[["DatabaseManager"]]],"meta":{"line":9,"file":"BaseTable.js","path":"app/database/tables"}}],"methods":[{"name":"get","description":"Get volume data.","returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":14,"file":"volumes.js","path":"app/database/tables"}},{"name":"add","description":"Add a guild to volumes","params":[{"name":"id","description":"the guild id to add to the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":23,"file":"volumes.js","path":"app/database/tables"}},{"name":"delete","description":"Remove a guild from volumes","params":[{"name":"id","description":"the guild id to remove from the database","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":32,"file":"volumes.js","path":"app/database/tables"}},{"name":"edit","description":"Edit the volume for a guild","params":[{"name":"id","description":"the guild id to edit in the database","type":[[["string"]]]},{"name":"volume","description":"the new volume to save","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":42,"file":"volumes.js","path":"app/database/tables"}},{"name":"parseJSON","description":"Parses stringified JSON from the database fetch","inherits":"BaseTable#parseJSON","inherited":true,"params":[{"name":"columns","description":"the columns that contain json data","type":[[["Array","<"],["string",">"]]]},{"name":"data","description":"the data returned from the database","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":23,"file":"BaseTable.js","path":"app/database/tables"}}],"meta":{"line":9,"file":"volumes.js","path":"app/database/tables"}},{"name":"CommandInteraction","description":"Represents a command interaction, see {@link InteractionClient}.","extends":[[["Interaction"]]],"props":[{"name":"id","description":"The ID of this interaction.","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":23,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"token","description":"The token of this interaction.","readonly":true,"type":[[["string"]]],"meta":{"line":30,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"commandID","description":"The ID of the invoked command.","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":37,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"commandName","description":"The name of the invoked command.","readonly":true,"type":[[["string"]]],"meta":{"line":44,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"options","description":"The options passed to the command.","readonly":true,"type":[[["Object"]]],"meta":{"line":51,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"channel","description":"The channel this interaction was sent in.","readonly":true,"nullable":true,"type":[[["Channel"]]],"meta":{"line":58,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"guild","description":"The guild this interaction was sent in, if any.","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":65,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it.","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":72,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at.","readonly":true,"type":[[["number"]]],"meta":{"line":80,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"createdAt","description":"The time the interaction was created at.","readonly":true,"type":[[["Date"]]],"meta":{"line":89,"file":"CommandInteraction.js","path":"app/discord"}}],"methods":[{"name":"acknowledge","description":"Acknowledge this interaction without content.","params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]}],"async":true,"meta":{"line":97,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"reply","description":"Reply to this interaction.","params":[{"name":"content","description":"The content for the message.","nullable":true,"type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide.","nullable":true,"type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"meta":{"line":106,"file":"CommandInteraction.js","path":"app/discord"}}],"meta":{"line":10,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"BaseCommand","description":"Represents a command that can be triggered in discord","abstract":true,"construct":{"name":"BaseCommand","description":"Create a new command","params":[{"name":"socket","description":"the handler that will call the command","type":[[["DiscordManager"]]]},{"name":"data","description":"the data that defines the command","type":[[["CommandData"]]]}]},"props":[{"name":"socket","description":"The discord manager that calls this command","type":[[["DiscordManager"]]],"meta":{"line":37,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"name","description":"The base name for this command, how the command is called in discord (aside from aliases)","type":[[["string"]]],"meta":{"line":44,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"aliases","description":"The aliases for this command","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":52,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"description","description":"What this command does","nullable":true,"type":[[["string"]]],"meta":{"line":61,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"usage","description":"The usage for this command","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":70,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"guild","description":"The guild this command is restricted to, if any","type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]],"meta":{"line":79,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"channel","description":"The channel this command is restricted to, if any","type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]],"meta":{"line":88,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"role","description":"The role this command is restricted to, if any","nullable":true,"type":[[["string"]]],"meta":{"line":97,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"permissions","description":"The permissions requied to use this command, if any","nullable":true,"type":[[["PermissionResolvable"]]],"meta":{"line":106,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"user","description":"The user this command is restricted to, if any","type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]],"meta":{"line":115,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"args","description":"Whether arguments are required for this command (false when handled by the the run function)","nullable":true,"type":[[["boolean"]]],"meta":{"line":124,"file":"BaseCommand.js","path":"app/discord/commands"}}],"methods":[{"name":"run","description":"Runs the command","abstract":true,"params":[{"name":"message","description":"the message that executed the command","type":[[["Message"]]]},{"name":"args","description":"the content of the message split on spaces excluding the command name","type":[[["Array","<"],["string",">"]]]}],"meta":{"line":139,"file":"BaseCommand.js","path":"app/discord/commands"}}],"meta":{"line":7,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"CommandManager","description":"Stores the commands for a discord manager\nCommands that are disabled are not registered","props":[{"name":"socket","description":"The discord manager that handles these commands","access":"private","type":[[["DiscordManager"]]],"meta":{"line":12,"file":"CommandManager.js","path":"app/discord/commands"}},{"name":"registered","description":"The registered commands, mapped by name","type":[[["Collection","<"],["string",", "],["BaseCommand",">"]]],"meta":{"line":24,"file":"CommandManager.js","path":"app/discord/commands"}}],"methods":[{"name":"registerGroup","description":"Registers a group of commands","access":"private","params":[{"name":"commands","description":"the commands to register","type":[[["Array","<"],["BaseCommand",">"]]]},{"name":"group","description":"the group to which this command resides (if disabledCommands includes this group name it will disable this command)","type":[[["string"]]]}],"meta":{"line":43,"file":"CommandManager.js","path":"app/discord/commands"}},{"name":"register","description":"Registers a command in the manager for use throughout the application","params":[{"name":"command","description":"the command to register","type":[[["BaseCommand"]]]}],"meta":{"line":54,"file":"CommandManager.js","path":"app/discord/commands"}}],"meta":{"line":10,"file":"CommandManager.js","path":"app/discord/commands"}},{"name":"Interaction","description":"Represents an interaction, see {@link InteractionClient}.","extends":[[["Base"]]],"meta":{"line":9,"file":"Interaction.js","path":"app/discord"}},{"name":"TwitchCommand","description":"Represents a command that can be triggered in twitch","abstract":true,"construct":{"name":"TwitchCommand","description":"Create a new command","params":[{"name":"socket","description":"the IRC that will call the command","type":[[["IrcManager"]]]},{"name":"data","description":"the data that defines the command","type":[[["TwitchCommandData"]]]}]},"props":[{"name":"socket","description":"The twitch manager that calls this command","type":[[["IrcManager"]]],"meta":{"line":20,"file":"TwitchCommand.js","path":"app/irc/commands"}},{"name":"name","description":"The base name for this command, how the command is called in discord (aside from aliases)","type":[[["string"]]],"meta":{"line":27,"file":"TwitchCommand.js","path":"app/irc/commands"}}],"methods":[{"name":"run","description":"Runs the command","abstract":true,"params":[{"name":"handler","description":"the handler that handles interacting with the socket","type":[[["CommandHandler"]]]},{"name":"hasArgsMod","description":"whether the command has arguments and the user is privileged","type":[[["boolean"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"whether the command has been successfully handled"},"meta":{"line":42,"file":"TwitchCommand.js","path":"app/irc/commands"}}],"meta":{"line":7,"file":"TwitchCommand.js","path":"app/irc/commands"}},{"name":"TwitchCommandManager","description":"Stores the commands for an IRC manager","props":[{"name":"socket","description":"The IRC manager that handles these commands","access":"private","type":[[["IrcManager"]]],"meta":{"line":11,"file":"TwitchCommandManager.js","path":"app/irc/commands"}},{"name":"registered","description":"The registered commands, mapped by name","type":[[["Collection","<"],["string",", "],["TwitchCommand",">"]]],"meta":{"line":23,"file":"TwitchCommandManager.js","path":"app/irc/commands"}}],"methods":[{"name":"register","description":"Registers a command in the manager for use throughout the application","params":[{"name":"command","description":"the command to register","type":[[["TwitchCommand"]]]}],"meta":{"line":36,"file":"TwitchCommandManager.js","path":"app/irc/commands"}}],"meta":{"line":9,"file":"TwitchCommandManager.js","path":"app/irc/commands"}},{"name":"CommandHandler","description":"The interface for any recieved twitch command","props":[{"name":"socket","description":"The twitch manager that is executing this command","type":[[["IrcManager"]]],"meta":{"line":13,"file":"command.js","path":"app/irc/handlers"}},{"name":"channel","description":"The name and id of the channel that the command was executed in","type":[[["Object"]]],"meta":{"line":20,"file":"command.js","path":"app/irc/handlers"}},{"name":"user","description":"The user that executed the command","type":[[["Object"]]],"meta":{"line":27,"file":"command.js","path":"app/irc/handlers"}},{"name":"command","description":"The database row that the command identified to","type":[[["Object"]]],"meta":{"line":34,"file":"command.js","path":"app/irc/handlers"}},{"name":"args","description":"The content of the message split on spaces excluding the command name","type":[[["Array","<"],["string",">"]]],"meta":{"line":41,"file":"command.js","path":"app/irc/handlers"}},{"name":"isBroadcaster","description":"Whether the user that executed this command is the broadcaster","type":[[["boolean"]]],"meta":{"line":53,"file":"command.js","path":"app/irc/handlers"}},{"name":"isPrivileged","description":"Whether the user that executed this command has moderation privileges","type":[[["boolean"]]],"meta":{"line":59,"file":"command.js","path":"app/irc/handlers"}},{"name":"isVip","description":"Whether the user that executed this command is vip","type":[[["boolean"]]],"meta":{"line":65,"file":"command.js","path":"app/irc/handlers"}},{"name":"hasArgs","description":"Whether arguments were provided with this exectuion","type":[[["boolean"]]],"meta":{"line":71,"file":"command.js","path":"app/irc/handlers"}},{"name":"target","description":"The targetted user, simply the first arg when provided, otherwise the user executing","type":[[["string"]]],"meta":{"line":77,"file":"command.js","path":"app/irc/handlers"}},{"name":"executor","description":"The command executor if the command is handled specially","nullable":true,"type":[[["TwitchCommand"]]],"meta":{"line":83,"file":"command.js","path":"app/irc/handlers"}},{"name":"handled","description":"Whether this command has already been handled","type":[[["boolean"]]],"meta":{"line":89,"file":"command.js","path":"app/irc/handlers"}}],"methods":[{"name":"execute","description":"Executes the command handled by this handler","access":"private","meta":{"line":96,"file":"command.js","path":"app/irc/handlers"}},{"name":"handle","description":"Handle actual command execution","access":"private","async":true,"meta":{"line":139,"file":"command.js","path":"app/irc/handlers"}},{"name":"respond","description":"Responds to the command with formatted content (can be used multiple times)","params":[{"name":"message","description":"the message to say","type":[[["string"]]]},{"name":"mention","description":"whether to mention the targetted user","default":false,"type":[[["boolean"]]]}],"meta":{"line":162,"file":"command.js","path":"app/irc/handlers"}}],"meta":{"line":10,"file":"command.js","path":"app/irc/handlers"}},{"name":"AuthManager","description":"Auth manager for the application.","extends":[[["RequestManager"]]],"props":[{"name":"driver","description":"The Authentication handler.","access":"private","type":[[["Axios"]]],"meta":{"line":13,"file":"AuthManager.js","path":"app/managers"}},{"name":"twitch","description":"The Twitch manager that instantiated this.","readonly":true,"type":[[["TwitchManager"]]],"meta":{"line":20,"file":"AuthManager.js","path":"app/managers"}},{"name":"api","description":"API request shortcut.","access":"private","readonly":true,"type":[[["Requester"]]],"meta":{"line":23,"file":"RequestManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"generateToken","description":"Generates the twitch api tokens for the given slug","access":"private","params":[{"name":"slug","description":"the user to generate the token for (_code must be in database)","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"token"},"meta":{"line":35,"file":"AuthManager.js","path":"app/managers"}},{"name":"getAccessToken","description":"Gets the twitch api access token for the given slug","params":[{"name":"slug","description":"the user to get the token for","optional":true,"default":"ApplicationOptions.twitch.irc?.identity?.username","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"token"},"meta":{"line":62,"file":"AuthManager.js","path":"app/managers"}},{"name":"refreshToken","description":"Refreshes the tokens for the given slug","access":"private","params":[{"name":"slug","description":"the user to refresh the tokens for","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"token"},"meta":{"line":78,"file":"AuthManager.js","path":"app/managers"}},{"name":"validateToken","description":"Validates the token provided","access":"private","params":[{"name":"token","description":"a twitch api token","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":105,"file":"AuthManager.js","path":"app/managers"}}],"meta":{"line":9,"file":"AuthManager.js","path":"app/managers"}},{"name":"BaseManager","description":"Manages the data and methods for a given API","abstract":true,"props":[{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}},{"name":"driver","description":"The driver that handles this managers API","readonly":true,"type":[[["Object"]]],"meta":{"line":23,"file":"BaseManager.js","path":"app/managers"}}],"meta":{"line":7,"file":"BaseManager.js","path":"app/managers"}},{"name":"DatabaseManager","description":"Database manager for the application.","extends":[[["BaseManager"]]],"props":[{"name":"driver","description":"The database driver.","access":"private","type":[[["mysql2Pool"]]],"meta":{"line":15,"file":"DatabaseManager.js","path":"app/managers"}},{"name":"tables","description":"The database tables.","type":[[["TableManager"]]],"meta":{"line":26,"file":"DatabaseManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"connection","description":"Create a connection to the database.","access":"private","returns":[[["Promise","<"],["mysql2Connection",">"]]],"meta":{"line":34,"file":"DatabaseManager.js","path":"app/managers"}},{"name":"query","description":"Query the database.","params":[{"name":"query","description":"the query to make","type":[[["string"]]]},{"name":"args","description":"the extra args to pass with the query","optional":true,"default":null,"type":[[["Array"]]]}],"async":true,"returns":[[["Promise"]]],"meta":{"line":49,"file":"DatabaseManager.js","path":"app/managers"}}],"meta":{"line":11,"file":"DatabaseManager.js","path":"app/managers"}},{"name":"DiscordManager","description":"Discord manager for the application.","extends":[[["EventManager"]]],"props":[{"name":"driver","description":"The Discord.js API / Websocket Client.","type":[[["discordjsClient"]]],"meta":{"line":22,"file":"DiscordManager.js","path":"app/managers"}},{"name":"embeds","description":"The Discord rich embeds.","type":[[["Object"]]],"meta":{"line":32,"file":"DiscordManager.js","path":"app/managers"}},{"name":"messages","description":"The message transformers.","type":[[["Object"]]],"meta":{"line":38,"file":"DiscordManager.js","path":"app/managers"}},{"name":"commandManager","description":"The command manager that registers all commands","type":[[["CommandManager"]]],"meta":{"line":44,"file":"DiscordManager.js","path":"app/managers"}},{"name":"applicationCommands","description":"The application commands for the socket, mapped by input.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":50,"file":"DiscordManager.js","path":"app/managers"}},{"name":"colorManager","description":"The color manager settings, mapped by guild.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":56,"file":"DiscordManager.js","path":"app/managers"}},{"name":"roleManager","description":"The role manager settings, mapped by guild.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":62,"file":"DiscordManager.js","path":"app/managers"}},{"name":"reactionRoles","description":"The reaction role manager settings, mapped by guild.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":68,"file":"DiscordManager.js","path":"app/managers"}},{"name":"voiceRoles","description":"The voice role manager settings, mapped by guild.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":74,"file":"DiscordManager.js","path":"app/managers"}},{"name":"prefixes","description":"The prefix settings, mapped by guild.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":80,"file":"DiscordManager.js","path":"app/managers"}},{"name":"rooms","description":"The rooms currently stored, mapped by guild-roomID.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":86,"file":"DiscordManager.js","path":"app/managers"}},{"name":"randomChannels","description":"The random channel movement settings, mapped by guild.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":92,"file":"DiscordManager.js","path":"app/managers"}},{"name":"newMemberRole","description":"The new member role settings, mapped by guild.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":98,"file":"DiscordManager.js","path":"app/managers"}},{"name":"musicData","description":"The music data, mapped by guild.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":104,"file":"DiscordManager.js","path":"app/managers"}},{"name":"commands","description":"The commands for the socket, mapped by input. Only available after DiscordManager#init()","type":[[["Collection","<"],["string",", "],["BaseCommand",">"]]],"meta":{"line":129,"file":"DiscordManager.js","path":"app/managers"}},{"name":"events","description":"The events this driver handles","type":[[["Object"]]],"meta":{"line":18,"file":"EventManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"init","description":"Initialize the manager.","async":true,"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":111,"file":"DiscordManager.js","path":"app/managers"}},{"name":"setCache","description":"Cache all managers and music.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":148,"file":"DiscordManager.js","path":"app/managers"}},{"name":"cacheMusic","description":"Cache the music data.","access":"private","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":169,"file":"DiscordManager.js","path":"app/managers"}},{"name":"cacheRooms","description":"Cache room data.","access":"private","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":188,"file":"DiscordManager.js","path":"app/managers"}},{"name":"cache","description":"Query the database and set a given cache.","access":"private","params":[{"name":"table","description":"the database table to get from","type":[[["BaseTable"]]]},{"name":"map","description":"the map to store data in","type":[[["Collection"]]]},{"name":"key","description":"a key to use for the new map","type":[[["string"]]]},{"name":"secondaryKey","description":"a dashed key to use for the new map","optional":true,"default":false,"type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":215,"file":"DiscordManager.js","path":"app/managers"}},{"name":"getChannel","description":"Get the channel for the given slug.","params":[{"name":"slug","description":"the channel name in settings to get","type":[[["string"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":227,"file":"DiscordManager.js","path":"app/managers"}},{"name":"getWebhook","description":"Get the webhook for the given slug.","params":[{"name":"slug","description":"the webhook name in settings to get","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Webhook",">"]]],"nullable":true},"meta":{"line":237,"file":"DiscordManager.js","path":"app/managers"}},{"name":"getContent","description":"Get the transformed content for the given slug.","params":[{"name":"slug","description":"the name of the message to get","type":[[["string"]]]},{"name":"args","description":"arguments to pass to the transformer","type":[[["Array"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":254,"file":"DiscordManager.js","path":"app/managers"}},{"name":"getEmbed","description":"Get the transformed embed for the given slug.","params":[{"name":"slug","description":"the name of the embed to get","type":[[["string"]]]},{"name":"args","description":"arguments to pass to the constructor","type":[[["Array"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":271,"file":"DiscordManager.js","path":"app/managers"}},{"name":"sendMessage","description":"Send a message with the given content and embed.","params":[{"name":"slug","description":"the channel name in settings to get and send to","type":[[["string"]]]},{"name":"content","description":"the content to send","optional":true,"type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"meta":{"line":288,"file":"DiscordManager.js","path":"app/managers"}},{"name":"sendWebhook","description":"Send a webhook with the given content and embed.","params":[{"name":"slug","description":"the webhook name in settings to get and send to","type":[[["string"]]]},{"name":"content","description":"the content to send","optional":true,"type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"meta":{"line":307,"file":"DiscordManager.js","path":"app/managers"}},{"name":"attach","description":"Attach the event listeners to the socket.","access":"private","inherits":"EventManager#attach","inherited":true,"meta":{"line":25,"file":"EventManager.js","path":"app/managers"}},{"name":"listen","description":"Listen for a socket event.","access":"private","inherits":"EventManager#listen","inherited":true,"params":[{"name":"event","description":"the name of the event to listen for","type":[[["string"]]]},{"name":"listener","description":"the function to call on event","type":[[["function"]]]}],"meta":{"line":39,"file":"EventManager.js","path":"app/managers"}}],"meta":{"line":18,"file":"DiscordManager.js","path":"app/managers"}},{"name":"EventManager","description":"Parent implementation for event-driven service classes.","extends":[[["BaseManager"]]],"abstract":true,"props":[{"name":"events","description":"The events this driver handles","type":[[["Object"]]],"meta":{"line":18,"file":"EventManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}},{"name":"driver","description":"The driver that handles this managers API","readonly":true,"type":[[["Object"]]],"meta":{"line":23,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"attach","description":"Attach the event listeners to the socket.","access":"private","meta":{"line":25,"file":"EventManager.js","path":"app/managers"}},{"name":"listen","description":"Listen for a socket event.","access":"private","params":[{"name":"event","description":"the name of the event to listen for","type":[[["string"]]]},{"name":"listener","description":"the function to call on event","type":[[["function"]]]}],"meta":{"line":39,"file":"EventManager.js","path":"app/managers"}}],"meta":{"line":10,"file":"EventManager.js","path":"app/managers"}},{"name":"HTTPManager","description":"HTTP manager for the application.","extends":[[["EventManager"]]],"props":[{"name":"driver","description":"The HTTP server.","type":[[["httpServer"]]],"meta":{"line":17,"file":"HTTPManager.js","path":"app/managers"}},{"name":"requests","description":"The socket request events.","type":[[["Object"]]],"meta":{"line":27,"file":"HTTPManager.js","path":"app/managers"}},{"name":"events","description":"The events this driver handles","type":[[["Object"]]],"meta":{"line":18,"file":"EventManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"init","description":"Initialize the manager.","returns":[[["Promise"]]],"meta":{"line":34,"file":"HTTPManager.js","path":"app/managers"}},{"name":"getChannel","description":"Get the channel for the given slug.","params":[{"name":"slug","description":"the username of the stream to get a notification channel for","type":[[["string"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":46,"file":"HTTPManager.js","path":"app/managers"}},{"name":"getMessage","description":"Get the message for the given slug.","params":[{"name":"slug","description":"the username of the stream to get a notification message for","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Message",">"]]],"nullable":true},"meta":{"line":60,"file":"HTTPManager.js","path":"app/managers"}},{"name":"getRole","description":"Get the role for the given slug.","params":[{"name":"slug","description":"the username of the stream to get a notification role for","type":[[["string"]]]},{"name":"channel","description":"a dicord js cached channel to get role data from","type":[[["Channel"]]]}],"async":true,"returns":[[["Role"]]],"meta":{"line":79,"file":"HTTPManager.js","path":"app/managers"}},{"name":"setMessage","description":"Update the messageID for stream stop editing","params":[{"name":"slug","description":"the username of the stream to edit a notification for","type":[[["string"]]]},{"name":"msgID","description":"the original snowflake message id","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":101,"file":"HTTPManager.js","path":"app/managers"}},{"name":"attach","description":"Attach the event listeners to the socket.","access":"private","inherits":"EventManager#attach","inherited":true,"meta":{"line":25,"file":"EventManager.js","path":"app/managers"}},{"name":"listen","description":"Listen for a socket event.","access":"private","inherits":"EventManager#listen","inherited":true,"params":[{"name":"event","description":"the name of the event to listen for","type":[[["string"]]]},{"name":"listener","description":"the function to call on event","type":[[["function"]]]}],"meta":{"line":39,"file":"EventManager.js","path":"app/managers"}}],"meta":{"line":13,"file":"HTTPManager.js","path":"app/managers"}},{"name":"IrcManager","description":"IRC manager for the application.","extends":[[["EventManager"]]],"props":[{"name":"driver","description":"The IRC Client.","type":[[["tmijsClient"]]],"meta":{"line":26,"file":"IrcManager.js","path":"app/managers"}},{"name":"twitch","description":"The Twitch manager that instantiated this.","readonly":true,"type":[[["TwitchManager"]]],"meta":{"line":32,"file":"IrcManager.js","path":"app/managers"}},{"name":"jokes","description":"The jokes for the IRC joke command.","type":[[["Array","<"],["Object",">"]]],"meta":{"line":44,"file":"IrcManager.js","path":"app/managers"}},{"name":"filters","description":"The moderation filters for the socket, mapped by ID.","type":[[["Collection","<"],["number",", "],["Object",">"]]],"meta":{"line":50,"file":"IrcManager.js","path":"app/managers"}},{"name":"commands","description":"The commands for the socket, mapped by input.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":56,"file":"IrcManager.js","path":"app/managers"}},{"name":"specialCommands","description":"The command manager that stores specially handled commands","type":[[["TwitchCommandManager"]]],"meta":{"line":62,"file":"IrcManager.js","path":"app/managers"}},{"name":"limiter","description":"The rate limiter.\nTwitch IRC only allows 100 requests every 30 seconds.","type":[[["RateLimiter"]]],"meta":{"line":69,"file":"IrcManager.js","path":"app/managers"}},{"name":"throttle","description":"The command throttle.","type":[[["Throttle"]]],"meta":{"line":75,"file":"IrcManager.js","path":"app/managers"}},{"name":"events","description":"The events this driver handles","type":[[["Object"]]],"meta":{"line":18,"file":"EventManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"init","description":"Initialize the manager.","async":true,"returns":[[["Promise"]]],"meta":{"line":82,"file":"IrcManager.js","path":"app/managers"}},{"name":"say","description":"Send a message.","params":[{"name":"channel","description":"the twitch channel to post in","type":[[["string"]]]},{"name":"message","description":"the message to post","type":[[["string"]]]}],"meta":{"line":98,"file":"IrcManager.js","path":"app/managers"}},{"name":"delete","description":"Send a command to delete the given message.","params":[{"name":"channel","description":"the twitch channel to delete from","type":[[["string"]]]},{"name":"uuid","description":"the unique id of the message","type":[[["string"]]]},{"name":"callback","description":"called after succesfull deletion","optional":true,"default":null,"type":[[["function"]]]}],"meta":{"line":111,"file":"IrcManager.js","path":"app/managers"}},{"name":"timeout","description":"Time a user out for the given duration.","params":[{"name":"channel","description":"the twitch channel to timeout in","type":[[["string"]]]},{"name":"username","description":"the twitch name to timeout","type":[[["string"]]]},{"name":"duration","description":"the duration of the timeout","type":[[["number"]]]},{"name":"callback","description":"called after succesfull timeout","optional":true,"default":null,"type":[[["function"]]]}],"meta":{"line":132,"file":"IrcManager.js","path":"app/managers"}},{"name":"ban","description":"Ban a user.","params":[{"name":"channel","description":"the twitch channel to ban in","type":[[["string"]]]},{"name":"username","description":"the twitch user to ban","type":[[["string"]]]},{"name":"callback","description":"called after succesfull ban","optional":true,"default":null,"type":[[["function"]]]}],"meta":{"line":152,"file":"IrcManager.js","path":"app/managers"}},{"name":"logModeration","description":"Log a moderation action to the database.","params":[{"name":"values","description":"the extra arguments to log","variable":true,"type":[["*"]]}],"meta":{"line":170,"file":"IrcManager.js","path":"app/managers"}},{"name":"setCache","description":"Cache all moderation filters, commands, and jokes.","returns":[[["Promise"]]],"meta":{"line":178,"file":"IrcManager.js","path":"app/managers"}},{"name":"cacheJokes","description":"Cache the jokes.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":188,"file":"IrcManager.js","path":"app/managers"}},{"name":"cacheFilters","description":"Cache the moderation filters.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":200,"file":"IrcManager.js","path":"app/managers"}},{"name":"cacheCommands","description":"Cache the commands.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":209,"file":"IrcManager.js","path":"app/managers"}},{"name":"cache","description":"Query the database and set a given cache.","params":[{"name":"table","description":"the database table to get","type":[[["string"]]]},{"name":"map","description":"the map to store data in","type":[[["Collection"]]]},{"name":"key","description":"a key to use for the new map","optional":true,"type":[[["string"]]]},{"name":"secondaryKey","description":"a dashed key to use for the new map","optional":true,"default":false,"type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":222,"file":"IrcManager.js","path":"app/managers"}},{"name":"attach","description":"Attach the event listeners to the socket.","access":"private","inherits":"EventManager#attach","inherited":true,"meta":{"line":25,"file":"EventManager.js","path":"app/managers"}},{"name":"listen","description":"Listen for a socket event.","access":"private","inherits":"EventManager#listen","inherited":true,"params":[{"name":"event","description":"the name of the event to listen for","type":[[["string"]]]},{"name":"listener","description":"the function to call on event","type":[[["function"]]]}],"meta":{"line":39,"file":"EventManager.js","path":"app/managers"}}],"meta":{"line":19,"file":"IrcManager.js","path":"app/managers"}},{"name":"LogManager","description":"Log manager for the application.","extends":[[["BaseManager"]]],"props":[{"name":"driver","description":"The log driver.","access":"private","type":[[["Winston"]]],"meta":{"line":41,"file":"LogManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"out","description":"Write a message to the log.","params":[{"name":"level","description":"the log level","type":[[["LogLevel"]]]},{"name":"source","description":"the module sourcing this log","type":[[["Module"]]]},{"name":"message","description":"the message to output","type":[[["string"]]]}],"async":true,"meta":{"line":57,"file":"LogManager.js","path":"app/managers"}},{"name":"fatal","description":"Exit the process after writing a message to the log.","params":[{"name":"level","description":"the log level","type":[[["LogLevel"]]]},{"name":"source","description":"the module sourcing this log","type":[[["Module"]]]},{"name":"message","description":"the message to output","type":[[["string"]]]}],"async":true,"meta":{"line":71,"file":"LogManager.js","path":"app/managers"}},{"name":"webhook","description":"Send a log message via webhook.","access":"private","params":[{"name":"level","description":"the log level","type":[[["LogLevel"]]]},{"name":"path","description":"the path to the module that this occured in","type":[[["string"]]]},{"name":"message","description":"the message to send","type":[[["string"]]]}],"returns":[[["Promise","<"],["axiosRequest",", "],["axiosResponse",">"]]],"meta":{"line":85,"file":"LogManager.js","path":"app/managers"}},{"name":"path","description":"Calculate the path of the given source module.","access":"private","params":[{"name":"source","description":"the module that made this log","type":[[["Module"]]]}],"returns":[[["string"]]],"meta":{"line":115,"file":"LogManager.js","path":"app/managers"}}],"meta":{"line":13,"file":"LogManager.js","path":"app/managers"}},{"name":"RequestManager","description":"Parent implementation for request-based service classes.","extends":[[["BaseManager"]]],"abstract":true,"props":[{"name":"api","description":"API request shortcut.","access":"private","readonly":true,"type":[[["Requester"]]],"meta":{"line":23,"file":"RequestManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}},{"name":"driver","description":"The driver that handles this managers API","readonly":true,"type":[[["Object"]]],"meta":{"line":23,"file":"BaseManager.js","path":"app/managers"}}],"meta":{"line":12,"file":"RequestManager.js","path":"app/managers"}},{"name":"TwitchManager","description":"Twitch manager for the application.","extends":[[["RequestManager"]]],"props":[{"name":"driver","description":"The Twitch API handler.","type":[[["Axios"]]],"meta":{"line":17,"file":"TwitchManager.js","path":"app/managers"}},{"name":"auth","description":"The Authentication manager for the application.","type":[[["AuthManager"]]],"meta":{"line":27,"file":"TwitchManager.js","path":"app/managers"}},{"name":"irc","description":"The IRC manager for the application.","type":[[["IrcManager"]]],"meta":{"line":34,"file":"TwitchManager.js","path":"app/managers"}},{"name":"api","description":"API request shortcut.","access":"private","readonly":true,"type":[[["Requester"]]],"meta":{"line":23,"file":"RequestManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"fetchChannel","description":"Fetch the channel for the application's channel ID.","params":[{"name":"userId","description":"fetch channel data from a specific user id","optional":true,"default":"ApplicationOptions.twitch.channel?.id","type":[[["number"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":43,"file":"TwitchManager.js","path":"app/managers"}},{"name":"userChannel","description":"Fetch the channel for the specified user's channel name.","params":[{"name":"user","description":"the username to fetch channel data of","type":[[["string"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":56,"file":"TwitchManager.js","path":"app/managers"}},{"name":"getID","description":"Get the cached channel id or fetch it from the api for the user name","params":[{"name":"user","description":"the username to fetch the id of","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":65,"file":"TwitchManager.js","path":"app/managers"}},{"name":"follow","description":"Fetch a follow object for the given user ID.","params":[{"name":"userId","description":"the user id to check the follow for","type":[[["number"]]]},{"name":"streamerId","description":"the channel id to check if following","optional":true,"default":"ApplicationOptions.twitch.channel?.id","type":[[["number"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":88,"file":"TwitchManager.js","path":"app/managers"}},{"name":"fetchStream","description":"Fetch the stream for the application's channel ID.","params":[{"name":"userId","description":"fetch stream data from a specific user id","optional":true,"default":"ApplicationOptions.twitch.channel?.id","type":[[["number"]]]}],"returns":[[["void"]]],"meta":{"line":102,"file":"TwitchManager.js","path":"app/managers"}},{"name":"fetchUser","description":"Fetch a user for the given login name.","params":[{"name":"name","description":"the login name to check","type":[[["string"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":115,"file":"TwitchManager.js","path":"app/managers"}},{"name":"fetchUptime","description":"Fetch the uptime for the specified stream.","params":[{"name":"user","description":"the user to fetch uptime for","optional":true,"default":"ApplicationOptions.twitch.channel?.name","type":[[["string"]]]}],"returns":[[["Promise","<"],["number",">"]]],"meta":{"line":125,"file":"TwitchManager.js","path":"app/managers"}}],"meta":{"line":13,"file":"TwitchManager.js","path":"app/managers"}},{"name":"Requester","description":"Not a real class, a proxy for api routes.","props":[{"name":"[param]","description":"A part of the url path, ending with one of {@link HTTPMethod}","readonly":true,"type":[[["Requester"]],[["function"]]],"meta":{"line":23,"file":"APIRouter.js","path":"app/util"}}],"methods":[{"name":"HTTPMethod","description":"The method to use in the fetch request, see {@link HTTPMethod}","params":[{"name":"data","description":"the data to pass to the request","type":[[["RequestData"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":40,"file":"APIRouter.js","path":"app/util"}},{"name":"*","description":"A variable part of the url path","params":[{"name":"routeKey","description":"the key to add to the url, any number of these is accepted","type":[[["string"]]]}],"meta":{"line":47,"file":"APIRouter.js","path":"app/util"}}],"meta":{"line":17,"file":"APIRouter.js","path":"app/util"}},{"name":"DiscordUtil","description":"Stores various discord specific utilities","methods":[{"name":"confirmAction","description":"Confirm a users desire to perform an action","scope":"static","params":[{"name":"message","description":"the message you are confirming in response to","type":[[["Message"]],[["Interaction"]]]},{"name":"text","description":"the text to say in the confirmation","type":[[["string"]]]},{"name":"time","description":"how long to wait for a reaction","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":17,"file":"DiscordUtil.js","path":"app/util"}},{"name":"delayDelete","description":"Deletes a message (if possible) after a specified time","scope":"static","params":[{"name":"message","description":"the message to delete","type":[[["Message"]]]},{"name":"time","description":"how long to delay","type":[[["number"]]]}],"meta":{"line":54,"file":"DiscordUtil.js","path":"app/util"}},{"name":"isSnowflake","description":"Checks whether a string is a valid discord snowflake","scope":"static","params":[{"name":"potentialSnoflake","description":"the string to check for a snwoflake","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":65,"file":"DiscordUtil.js","path":"app/util"}},{"name":"isGuild","description":"Test a guild ID against the setting for the given key","scope":"static","params":[{"name":"id","description":"the id of the guild to test","type":[[["string"]]]},{"name":"slugOrId","description":"the guild name or id(s)","type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]]},{"name":"settings","description":"the app settings for checking slugs","type":[[["Collection"]]]}],"returns":[[["boolean"]]],"meta":{"line":76,"file":"DiscordUtil.js","path":"app/util"}},{"name":"isChannel","description":"Test a channel ID against the setting for the given key","scope":"static","params":[{"name":"id","description":"the id of the channel to test","type":[[["string"]]]},{"name":"slugOrId","description":"the channel name or id(s)","type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]]},{"name":"settings","description":"the app settings for checking slugs","type":[[["Collection"]]]}],"returns":[[["boolean"]]],"meta":{"line":92,"file":"DiscordUtil.js","path":"app/util"}},{"name":"isUser","description":"Test a user ID against the setting for the given key","scope":"static","params":[{"name":"id","description":"the id of the user to test","type":[[["string"]]]},{"name":"slugOrId","description":"the user name or id(s)","type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]]},{"name":"settings","description":"the app settings for checking slugs","type":[[["Collection"]]]}],"returns":[[["boolean"]]],"meta":{"line":108,"file":"DiscordUtil.js","path":"app/util"}}],"meta":{"line":6,"file":"DiscordUtil.js","path":"app/util"}},{"name":"HTTPUtil","description":"Stores various http specific utilities","meta":{"line":6,"file":"HTTPUtil.js","path":"app/util"}},{"name":"Logging","description":"Not a real class, a proxy for the {@link LogManager} levels","props":[{"name":"[level]","description":"The level of log to make, one of {@link LogLevel}","readonly":true,"type":[[["Logging"]]],"meta":{"line":13,"file":"LogRouter.js","path":"app/util"}}],"methods":[{"name":"*","description":"Calls the logger at the previously specified level, if none was specified, this is `info`","params":[{"name":"source","description":"the module sourcing this log","type":[[["Module"]]]},{"name":"message","description":"the message to output","type":[[["string"]]]}],"meta":{"line":21,"file":"LogRouter.js","path":"app/util"}}],"meta":{"line":7,"file":"LogRouter.js","path":"app/util"}},{"name":"TwitchUtil","description":"Stores various twitch specific utilities","methods":[{"name":"handle","description":"Gets the user display name or username for a twitch user object","scope":"static","params":[{"name":"user","description":"the user to get from","type":[[["Object"]]]}],"returns":[[["string"]]],"meta":{"line":16,"file":"TwitchUtil.js","path":"app/util"}},{"name":"isBroadcaster","description":"Determines whether the defined user is the broadcaster of the specified channel","scope":"static","params":[{"name":"user","description":"a twitch user object","type":[[["Object"]]]},{"name":"channel","description":"a twitch channel object","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":26,"file":"TwitchUtil.js","path":"app/util"}},{"name":"isPrivileged","description":"Determines whether the defined user is a mod in the specified channel","scope":"static","params":[{"name":"user","description":"a twitch user object","type":[[["Object"]]]},{"name":"channel","description":"a twitch channel object","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":36,"file":"TwitchUtil.js","path":"app/util"}},{"name":"isVip","description":"Determines whether the defined user is a vip using their badges","scope":"static","params":[{"name":"user","description":"a twitch user object","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":48,"file":"TwitchUtil.js","path":"app/util"}}],"meta":{"line":6,"file":"TwitchUtil.js","path":"app/util"}},{"name":"UtilManager","description":"Stores various general purpose utilities for the application","props":[{"name":"constants","description":"An object containing all the constant data","scope":"static","access":"private","readonly":true,"type":[[["Object"]]],"meta":{"line":21,"file":"UtilManager.js","path":"app/util"}},{"name":"discord","description":"An object containing all discord utilities","scope":"static","readonly":true,"type":[[["DiscordUtil"]]],"meta":{"line":30,"file":"UtilManager.js","path":"app/util"}},{"name":"http","description":"An object containing all http utilities","scope":"static","readonly":true,"type":[[["HTTPUtil"]]],"meta":{"line":39,"file":"UtilManager.js","path":"app/util"}},{"name":"twitch","description":"An object containing all twich utilities","scope":"static","readonly":true,"type":[[["TwitchUtil"]]],"meta":{"line":48,"file":"UtilManager.js","path":"app/util"}}],"methods":[{"name":"clamp","description":"Restricts a numeric value to be between to numbers","scope":"static","params":[{"name":"value","description":"the number to clamp","type":[[["number"]]]},{"name":"min","description":"the minimum desired value","type":[[["number"]]]},{"name":"max","description":"the maximum desired value","type":[[["number"]]]}],"returns":[[["number"]]],"meta":{"line":59,"file":"UtilManager.js","path":"app/util"}},{"name":"collect","description":"Organizes an array of items into a discord collection based on a key","scope":"static","params":[{"name":"map","description":"the collection to arrange the data in","type":[[["Collection"]]]},{"name":"items","description":"the data to rearrange","type":[[["Array","<"],["Object",">"]]]},{"name":"key","description":"the element key to use as the identifier in the collection","type":[[["string"]]]},{"name":"secondaryKey","description":"the second half of a hyphenated key","optional":true,"type":[[["string"]]]},{"name":"val","description":"only store a specific value (secondaryKey must be set (can be false) to use this)","optional":true,"default":null,"type":[[["string"]]]}],"meta":{"line":71,"file":"UtilManager.js","path":"app/util"}},{"name":"format","description":"Replaces parameters wrapped in {} with values","scope":"static","params":[{"name":"template","description":"the message to format with additional information","type":[[["string"]]]},{"name":"values","description":"an object containing key value pairs of what to replace and what it is replaced with","type":[[["Object"]]]}],"returns":[[["string"]]],"meta":{"line":87,"file":"UtilManager.js","path":"app/util"}},{"name":"humanBytes","description":"Makes a number of bytes easier to read for humans","scope":"static","params":[{"name":"bytes","description":"the raw number of bytes","type":[[["number"]]]}],"returns":[[["string"]]],"meta":{"line":101,"file":"UtilManager.js","path":"app/util"}},{"name":"humanDate","description":"Formats a date to the form `Month #, ####`","scope":"static","params":[{"name":"time","description":"the date to transform","type":[[["Date"]]]}],"returns":[[["string"]]],"meta":{"line":115,"file":"UtilManager.js","path":"app/util"}},{"name":"humanDuration","description":"Formats a time in milliseconds to a human readable form","scope":"static","params":[{"name":"diff","description":"the time to reformat","type":[[["number"]]]}],"returns":[[["string"]]],"meta":{"line":124,"file":"UtilManager.js","path":"app/util"}},{"name":"jitter","description":"Generates a random value between the specified values","scope":"static","params":[{"name":"min","description":"the minimum end of the allowed range","type":[[["number"]]]},{"name":"max","description":"the maximum end of the allowed range","type":[[["number"]]]}],"returns":[[["number"]]],"meta":{"line":137,"file":"UtilManager.js","path":"app/util"}},{"name":"mentionable","description":"Formats a twitch message to start with a mention if set","scope":"static","params":[{"name":"mention","description":"whether or not to mention the target","type":[[["boolean"]]]},{"name":"target","description":"the person to send the message to","type":[[["string"]]]},{"name":"message","description":"the message to augment","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":148,"file":"UtilManager.js","path":"app/util"}},{"name":"mergeDefault","description":"Sets default properties on an object that aren't already specified.","scope":"static","access":"private","params":[{"name":"def","description":"Default properties","type":[[["Object"]]]},{"name":"given","description":"Object to assign defaults to","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":159,"file":"UtilManager.js","path":"app/util"}},{"name":"relativeTime","description":"Gets the relative amount of time since a specified time","scope":"static","params":[{"name":"then","description":"the time to get the difference from now as","type":[[["Moment"]],[["string"]],[["number"]],[["Date"]]]},{"name":"specificity","description":"the maximum units to display","default":2,"type":[[["number"]]]},{"name":"preferHours","description":"whether to use hours instead of days","default":false,"type":[[["boolean"]]]}],"returns":[[["string"]]],"meta":{"line":178,"file":"UtilManager.js","path":"app/util"}},{"name":"usage","description":"Formats an array of usages in a readable form","scope":"static","params":[{"name":"value","description":"all of the available usage types","type":[[["string"]],[["Array","<"],["string",">"]]]},{"name":"prefix","description":"the prefix for the command","type":[[["string"]]]},{"name":"command","description":"the command name","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":199,"file":"UtilManager.js","path":"app/util"}},{"name":"variableInterval","description":"A function caller that repatedly calls after a pseudo random time","scope":"static","params":[{"name":"callback","description":"the function to call after each delay","type":[[["function"]]]},{"name":"delay","description":"the function that determines a delay time (returns number)","type":[[["function"]]]},{"name":"wrapper","description":"a function called that handles the restart and callback of the interval","optional":true,"type":[[["function"]]]}],"returns":[[["self"]]],"meta":{"line":212,"file":"UtilManager.js","path":"app/util"}}],"meta":{"line":10,"file":"UtilManager.js","path":"app/util"}}],"interfaces":[],"typedefs":[{"name":"IRCCommandEditProperty","description":"The type of properties that can be edited for an IRC command:\n* count\n* output\n* restriction\n* rename","type":[[["string"]]],"meta":{"line":43,"file":"ircCommands.js","path":"app/database/tables"}},{"name":"RoomData","description":"The data for any room:","type":[[["Object"]]],"params":[{"name":"id","description":"the id of the room","type":[[["string"]]]},{"name":"name","description":"the display name of the room","type":[[["string"]]]},{"name":"owner","description":"the snowflake of the room owner","type":[[["string"]]]},{"name":"playerCount","description":"the max number of players allowed","type":[[["number"]]]},{"name":"code","description":"the current code for the room","type":[[["string"]]]},{"name":"players","description":"an array of snowflakes for current players","type":[[["Array","<"],["string",">"]]]},{"name":"waiting","description":"an array of snowflakes for people in the waiting room","type":[[["Array","<"],["string",">"]]]},{"name":"lastChannelID","description":"the snowflake for the channel the last message of this room was sent in","type":[[["string"]]]},{"name":"lastMessageID","description":"the snowflake for the last message this room was sent as","type":[[["string"]]]}],"meta":{"line":36,"file":"rooms.js","path":"app/database/tables"}},{"name":"CommandData","description":"Data that defines a command\nChecks are done in the following order:\n* `Guild`\n* `Channel`\n* `User`\n* `Role`\n* `Permissions`\n\n e.g. if a command is executed and has role and channel set, if it is not sent in the channel specified, it will not run","type":[[["Object"]]],"params":[{"name":"name","description":"the name of the command (used to register the command as useable)","type":[[["string"]]]},{"name":"aliases","description":"a list of aliases that can be used to call this command","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"description","description":"what the command does","optional":true,"type":[[["string"]]]},{"name":"usage","description":"an array of possible ways to use the command (for legacy help)","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"guild","description":"restrict the command to a specific guild","optional":true,"type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]]},{"name":"channel","description":"restrict the command to a specific channel (or set of channels if specified in database)","optional":true,"type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]]},{"name":"role","description":"restrict the command to a specific role (those with `Manage Roles` bypass this)","optional":true,"type":[[["string"]]]},{"name":"permissions","description":"restrict the command to users with certain permissions","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"user","description":"restrict the command to a specific user","optional":true,"type":[[["string"]],[["Snowflake"]],[["Array","<"],["Snowflake",">"]]]},{"name":"args","description":"whether arguments are required (set to false to provide a custom error message handled in command)","optional":true,"type":[[["boolean"]]]}],"meta":{"line":8,"file":"BaseCommand.js","path":"app/discord/commands"}},{"name":"TwitchCommandData","description":"Data that defines a Twitch command","type":[[["Object"]]],"params":[{"name":"name","description":"the name of the command (used to register the command as useable)","type":[[["string"]]]}],"meta":{"line":8,"file":"TwitchCommand.js","path":"app/irc/commands"}},{"name":"HTTPMethod","description":"An HTTP fetch method, one of:\n* get\n* patch\n* post\n* put\n* delete","type":[[["string"]]],"meta":{"line":7,"file":"APIRouter.js","path":"app/util"}},{"name":"RequestData","description":"Data passed to any request","type":[[["Object"]]],"params":[{"name":"params","description":"parameters to put in the url","optional":true,"type":[[["Object"]]]},{"name":"data","description":"for put, post, delete, and patch, the data to pass","optional":true,"type":[[["Object"]]]},{"name":"responseType","description":"the expected response type","optional":true,"default":"json","type":[[["string"]]]},{"name":"headers","description":"the headers to send with the response CAUTION: this *can* overide default headers","optional":true,"type":[[["Object"]]]}],"meta":{"line":31,"file":"APIRouter.js","path":"app/util"}},{"name":"ApplicationOptions","description":"Options for the application","type":[[["Object"]]],"props":[{"name":"database","description":"options for database","type":[[["DatabaseOptions"]]]},{"name":"debug","description":"whether the application is in debug mode","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableDiscord","description":"whether to disable discord (note: most of the functionality is dependent on discord)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableIRC","description":"whether to disable Twitch IRC","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableServer","description":"whether to disable the built in HTTP server","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableTwitch","description":"whether to completely disable twitch (forces disableIRC to true)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"discord","description":"options for discord (does not need to be present if disableDiscord is true)","type":[[["DiscordOptions"]]]},{"name":"http","description":"options for http (does not need to be present if disableServer is true)","optional":true,"type":[[["HTTPOptions"]]]},{"name":"log","description":"options for logging","type":[[["LogOptions"]]]},{"name":"twitch","description":"options for twitch (does not need to be present if disableTwitch is true)","type":[[["TwitchOptions"]]]},{"name":"youtubeToken","description":"the token used for connecting to youtubes API (for music bot) (YOUTUBE_TOKEN in env if not provided)","optional":true,"type":[[["string"]]]}],"meta":{"line":3,"file":"Constants.js","path":"app/util"}},{"name":"DatabaseOptions","description":"The database options","type":[[["Object"]]],"props":[{"name":"database","description":"the name of the database within the server to use","type":[[["string"]]]},{"name":"host","description":"the domain / ip of the database","type":[[["string"]]]},{"name":"password","description":"the password used to log in to the database (DATABASE_PASSWORD in env if not provided)","type":[[["string"]]]},{"name":"port","description":"the port to attempt connections on","optional":true,"default":3306,"type":[[["number"]]]},{"name":"timezone","description":"the timezone to use","optional":true,"default":"Z","type":[[["string"]]]},{"name":"user","description":"the user to log in as (DATABASE_USER in env if not provided)","type":[[["string"]]]}],"meta":{"line":25,"file":"Constants.js","path":"app/util"}},{"name":"DisableableCommands","description":"A disableable discord command, the top level is groups which disable the items within as well\n* `all` - disables all built in commands\n* `gaming`\n * `random`\n * `room`\n* `general`\n * `help`\n* `management`\n * `eval`\n * `reboot`\n * `reload`\n * `setstatus`\n * `status`\n* `moderation`\n * `clear`\n * `moveall`\n * `muteall`\n * `nuke`\n * `randommove`\n * `unmuteall`\n* `music` - some sub items are not shown as they should not be disabled without disabling the whole group\n * `loop`\n * `nowplaying`\n * `remove`\n * `shuffle`\n * `skip`\n * `skipall`\n * `skipto`\n * `volume`\n* `roles`\n * `autorole`\n * `color`\n * `colormanager`\n * `makeme`\n * `makemenot`\n * `reactionroles`\n * `rolemanager`\n * `voceroles`\n* `twitch`\n * `commandlist`\n * `commands`","type":[[["string"]]],"meta":{"line":41,"file":"Constants.js","path":"app/util"}},{"name":"DiscordOptions","description":"The options for the discord handler","type":[[["Object"]]],"props":[{"name":"clientOptions","description":"the options to pass to the djs client","optional":true,"type":[[["discordjsClientOptions"]]]},{"name":"disabledCommands","description":"a list of commands to disable, for slash commands, this only needs to be set when registering","optional":true,"type":[[["Array","<"],["DisableableCommands",">"]]]},{"name":"token","description":"the token used to login to the bot application (DISCORD_TOKEN in env if not provided)","type":[[["string"]]]}],"meta":{"line":86,"file":"Constants.js","path":"app/util"}},{"name":"HTTPOptions","description":"The options for the built in web server","type":[[["Object"]]],"props":[{"name":"port","description":"the port to listen on","optional":true,"default":80,"type":[[["number"]]]}],"meta":{"line":100,"file":"Constants.js","path":"app/util"}},{"name":"LogOptions","description":"The logging options","type":[[["Object"]]],"props":[{"name":"maxLevel","description":"the maximum level of logging to allow in the output file","optional":true,"default":"error","type":[[["LogLevel"]]]},{"name":"outputFile","description":"the location of the output file, either relative or direct path","type":[[["string"]]]},{"name":"verbose","description":"whether to log verbose to the console","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"webhookBase","description":"the webhook base url for discord webhooks","optional":true,"default":"https://discord.com/api/webhooks","type":[[["string"]]]},{"name":"webhookToken","description":"the token for the logging webhook (LOG_WEBHOOK_TOKEN in env if not provided)","type":[[["string"]]]}],"meta":{"line":109,"file":"Constants.js","path":"app/util"}},{"name":"TwitchOptions","description":"The options for the twitch handler","type":[[["Object"]]],"props":[{"name":"api","description":"Base url of the api","optional":true,"default":"https://api.twitch.tv/kraken","type":[[["string"]]]},{"name":"authapi","description":"Base url for the authentication api","optional":true,"default":"https://id.twitch.tv/oauth2","type":[[["string"]]]},{"name":"botCode","description":"the code used to generate tokens for the bot user, must have token or code in the database if not provided","optional":true,"type":[[["string"]]]},{"name":"channel.id","description":"the channel id for the 'default' listening twitch channel","optional":true,"type":[[["string"]]]},{"name":"channel.name","description":"the channel name for the 'default' listening twitch channel","optional":true,"type":[[["string"]]]},{"name":"clientID","description":"the id of the api application uses (TWITCH_CLIENT_ID in env if not provided)","type":[[["string"]]]},{"name":"clientSecret","description":"the client secret for the api application (TWITCH_CLIENT_SECRET in env if not provided)","type":[[["string"]]]},{"name":"irc","description":"options for the irc client","optional":true,"type":[[["IRCOptions"]]]},{"name":"ircThrottle","description":"options for throttling irc commands","optional":true,"type":[[["ThrottleOptions"]]]},{"name":"redirectUri","description":"a registered redirect URI for your application","type":[[["string"]]]}],"meta":{"line":124,"file":"Constants.js","path":"app/util"}},{"name":"IRCConnectionOptions","description":"IRC connection options for tmi.js","type":[[["Object"]]],"props":[{"name":"server","description":"the server to connect to","optional":true,"default":"irc-ws.chat.twitch.tv","type":[[["string"]]]},{"name":"port","description":"the port to connect on","optional":true,"default":80,"type":[[["number"]]]},{"name":"reconnect","description":"whether to attempt reconnections automatically","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"maxReconnectAttempts","description":"max number of reconnect attempts","optional":true,"default":"Infinity","type":[[["number"]]]},{"name":"maxReconnectInterval","description":"max time to delay between reconnects","optional":true,"default":30000,"type":[[["number"]]]},{"name":"reconnectDecay","description":"the rate of increase of the reconnect delay","optional":true,"default":1.5,"type":[[["number"]]]},{"name":"reconnectInterval","description":"number of ms before attempting to reconnect","optional":true,"default":1000,"type":[[["number"]]]},{"name":"secure","description":"Use SSL/HTTPS (overrides prt to 443)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"timeout","description":"how long to wait for response from server","optional":true,"default":9999,"type":[[["number"]]]}],"meta":{"line":145,"file":"Constants.js","path":"app/util"}},{"name":"IRCOptions","description":"IRC connection options (these are tmi.js options)","type":[[["Object"]]],"props":[{"name":"connection","description":"the options for the IRC Connection","optional":true,"type":[[["IRCConnectionOptions"]]]},{"name":"options.debug","description":"whether the irc client is in debug mode","optional":true,"type":[[["boolean"]]]},{"name":"identity.username","description":"the username of the bot that posts in chat","optional":true,"type":[[["string"]]]},{"name":"identity.password","description":"the password or a password generator function","optional":true,"default":"auth.getAccessToken","type":[[["string"]],[["function"]]]},{"name":"channels","description":"list of channels to join on startup","optional":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":159,"file":"Constants.js","path":"app/util"}},{"name":"ThrottleOptions","description":"Options for throttling commands in IRC","type":[[["Object"]]],"props":[{"name":"burst","description":"how many time to allow a command in short bursts","optional":true,"default":1,"type":[[["number"]]]},{"name":"rate","description":"the number of actions renewed per window","optional":true,"default":1,"type":[[["number"]]]},{"name":"window","description":"the time frame which rate and burst act in","optional":true,"default":30000,"type":[[["number"]]]},{"name":"overrides","description":"an object linking command names to their burst, rate, and window overrides","optional":true,"type":[[["Object"]]]}],"meta":{"line":174,"file":"Constants.js","path":"app/util"}},{"name":"Colors","description":"Predefined custom colors for use anywhere\n* `BRIGHT_GREEN`\n* `BRIGHT_PINK`\n* `BRIGHT_PURPLE`\n* `CYAN`\n* `DEEP_GOLD`\n* `SALMON`\n* `TWITCH`","type":[[["Object"]]],"meta":{"line":190,"file":"Constants.js","path":"app/util"}},{"name":"LogLevel","description":"A level of logging based on the following:\n* fatal - a critical error that ends the application\n* critical - potentially breaking issue\n* error - high priority non-breaking issue\n* warn - non-breaking issue\n* info - general information\n* debug - highly detailed debug information\n* verbose - clutters the log","type":[[["string"]]],"meta":{"line":281,"file":"Constants.js","path":"app/util"}}],"externals":[]}