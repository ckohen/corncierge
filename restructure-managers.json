{"meta":{"generator":"0.9.0","format":20,"date":1609673715645},"custom":null,"classes":[{"name":"Application","description":"The application container.","access":"public","construct":{"name":"Application","description":"Create a new application instance.","params":[{"name":"options","description":"the options to provide to the application","optional":true,"default":"{}","type":[[["Object"]]]}]},"props":[{"name":"debug","description":"Whether the application is in debug mode.","access":"private","type":[[["boolean"]]],"meta":{"line":33,"file":"Application.js","path":"app"}},{"name":"api","description":"The API manager for the application.","access":"private","type":[[["ApiManager"]]],"meta":{"line":40,"file":"Application.js","path":"app"}},{"name":"auth","description":"The Authentication manager for the application.","access":"private","type":[[["AuthManager"]]],"meta":{"line":47,"file":"Application.js","path":"app"}},{"name":"irc","description":"The IRC manager for the application.","access":"private","type":[[["IrcManager"]]],"meta":{"line":54,"file":"Application.js","path":"app"}},{"name":"logger","description":"The log manager for the application.","access":"private","type":[[["LogManager"]]],"meta":{"line":61,"file":"Application.js","path":"app"}},{"name":"settings","description":"The settings for the application, mapped by name.","access":"private","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":68,"file":"Application.js","path":"app"}},{"name":"streaming","description":"The streaming settings for the application, mapped by name.","access":"private","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":75,"file":"Application.js","path":"app"}},{"name":"discord","description":"The Discord manager for the application.","access":"private","type":[[["DiscordManager"]]],"meta":{"line":82,"file":"Application.js","path":"app"}},{"name":"http","description":"The HTTP Server manager for the application.","access":"private","type":[[["HTTPManager"]]],"meta":{"line":89,"file":"Application.js","path":"app"}},{"name":"database","description":"The database manager for the application.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":96,"file":"Application.js","path":"app"}},{"name":"ending","description":"True when intentionally ending the application so subapplications do not restart","access":"private","type":[[["Boolean"]]],"meta":{"line":103,"file":"Application.js","path":"app"}},{"name":"log","description":"Logging shortcut. Logs to `info` by default. Other levels are properties.","readonly":true,"type":[[["Logging"]]],"meta":{"line":111,"file":"Application.js","path":"app"}}],"methods":[{"name":"boot","description":"Boot the application.","access":"public","async":true,"meta":{"line":119,"file":"Application.js","path":"app"}},{"name":"setOptions","description":"Validate and set the configuration options for the application.","access":"private","params":[{"name":"options","description":"the options to validate","type":[[["Object"]]]}],"meta":{"line":151,"file":"Application.js","path":"app"}},{"name":"setSettings","description":"Cache all database settings for the application.","access":"private","returns":[[["Promise"]]],"meta":{"line":165,"file":"Application.js","path":"app"}},{"name":"setStreaming","description":"Cache all database streaming settings for the application.","access":"private","returns":[[["Promise"]]],"meta":{"line":179,"file":"Application.js","path":"app"}}],"meta":{"line":19,"file":"Application.js","path":"app"}},{"name":"ApiManager","description":"API manager for the application.","extends":[[["RequestManager"]]],"props":[{"name":"api","description":"API request shortcut.","readonly":true,"type":[[["Requester"]]],"meta":{"line":22,"file":"RequestManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}},{"name":"driver","description":"The driver that handles this managers API","readonly":true,"type":[[["Object"]]],"meta":{"line":23,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"channel","description":"Get the channel for the application's channel ID.","params":[{"name":"callback","description":"the function to call afer getting channel data","type":[[["function"]]]},{"name":"userId","description":"get channel data from a specific user id","optional":true,"default":"this.app.options.twitch.channel.id","type":[[["number"]]]}],"returns":[[["void"]]],"meta":{"line":28,"file":"ApiManager.js","path":"app/api"}},{"name":"userChannel","description":"Get the channel for the specified user's channel name.","params":[{"name":"user","description":"the username to get channel data of","type":[[["string"]]]},{"name":"callback","description":"the function to call afer getting channel data","type":[[["function"]]]}],"returns":[[["void"]]],"meta":{"line":42,"file":"ApiManager.js","path":"app/api"}},{"name":"follow","description":"Get a follow object for the given user ID.","params":[{"name":"userId","description":"the user id to check the follow for","type":[[["number"]]]},{"name":"streamerId","description":"the channel to check if following","optional":true,"default":"this.app.options.twitch.channel.id","type":[[["number"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":59,"file":"ApiManager.js","path":"app/api"}},{"name":"stream","description":"Get the stream for the application's channel ID.","params":[{"name":"callback","description":"the function to call afer getting stream data","type":[[["function"]]]},{"name":"userId","description":"get stream data from a specific user id","optional":true,"default":"this.app.options.twitch.channel.id","type":[[["number"]]]}],"returns":[[["void"]]],"meta":{"line":69,"file":"ApiManager.js","path":"app/api"}},{"name":"user","description":"Get a user for the given login name.","params":[{"name":"name","description":"the login name to check","type":[[["string"]]]},{"name":"callback","description":"the function to call afer getting user data","type":[[["function"]]]}],"returns":[[["void"]]],"meta":{"line":83,"file":"ApiManager.js","path":"app/api"}},{"name":"uptime","description":"Get the uptime for the specified stream.","params":[{"name":"callback","description":"the function to call afer getting channel data","type":[[["function"]]]},{"name":"user","description":"the user to check uptime for","type":[[["string"]]]},{"name":"readOnly","description":"whether to override the caching behavior","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["void"]]],"meta":{"line":97,"file":"ApiManager.js","path":"app/api"}}],"meta":{"line":11,"file":"ApiManager.js","path":"app/api"}},{"name":"Requester","description":"Not a real class, a proxy for api routes.","props":[{"name":"[param]","description":"A part of the url path, ending with one of {@link HTTPMethod}","readonly":true,"type":[[["Requester"]],[["Promise"]]],"meta":{"line":23,"file":"APIRouter.js","path":"app/api"}}],"methods":[{"name":"HTTPMethod","params":[{"name":"data","description":"the data to pass to the request","type":[[["RequestData"]]]}],"meta":{"line":40,"file":"APIRouter.js","path":"app/api"}},{"name":"*","description":"A variable part of the url path","params":[{"name":"routeKey","description":"the key to add to the url, any number of these is accepted","type":[[["string"]]]}],"meta":{"line":45,"file":"APIRouter.js","path":"app/api"}}],"meta":{"line":17,"file":"APIRouter.js","path":"app/api"}},{"name":"AuthManager","description":"Auth manager for the application.","extends":[[["RequestManager"]]],"props":[{"name":"api","description":"API request shortcut.","readonly":true,"type":[[["Requester"]]],"meta":{"line":22,"file":"RequestManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}},{"name":"driver","description":"The driver that handles this managers API","readonly":true,"type":[[["Object"]]],"meta":{"line":23,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"generateToken","description":"Generates the twitch api tokens for the given slug","params":[{"name":"slug","description":"the user to generate the token for (_code must be in database)","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"token"},"meta":{"line":25,"file":"AuthManager.js","path":"app/api"}},{"name":"getAccessToken","description":"Gets the twitch api access token for the given slug","params":[{"name":"slug","description":"the user to get the token for","optional":true,"default":"this.app.options.irc.identity.username","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"token"},"meta":{"line":49,"file":"AuthManager.js","path":"app/api"}},{"name":"refreshToken","description":"Refreshes the tokens for the given slug","params":[{"name":"slug","description":"the user to refresh the tokens for","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"token"},"meta":{"line":66,"file":"AuthManager.js","path":"app/api"}},{"name":"validateToken","description":"Validates the token provided","params":[{"name":"token","description":"a twitch api token","type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":89,"file":"AuthManager.js","path":"app/api"}}],"meta":{"line":9,"file":"AuthManager.js","path":"app/api"}},{"name":"DatabaseManager","description":"Database manager for the application.","extends":[[["BaseManager"]]],"props":[{"name":"driver","description":"The database driver.","type":[[["Pool"]]],"meta":{"line":15,"file":"DatabaseManager.js","path":"app/database"}},{"name":"tables","description":"The database tables.","type":[[["Object"]]],"meta":{"line":25,"file":"DatabaseManager.js","path":"app/database"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"connection","description":"Create a connection to the database.","returns":[[["Promise","<"],["Connection",">"]]],"meta":{"line":32,"file":"DatabaseManager.js","path":"app/database"}},{"name":"query","description":"Query the database.","params":[{"name":"query","description":"the query to make","type":[[["string"]]]},{"name":"args","description":"the extra args to pass with the query","optional":true,"default":null,"type":[[["Array"]]]}],"async":true,"returns":[[["Promise"]]],"meta":{"line":47,"file":"DatabaseManager.js","path":"app/database"}},{"name":"get","description":"Gets the databse table specified","params":[{"name":"slug","description":"the name of the table to get","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["Object",">>"]]],"meta":{"line":64,"file":"DatabaseManager.js","path":"app/database"}},{"name":"add","description":"Adds a new entry to the table specified","params":[{"name":"slug","description":"the name of the table to add to","type":[[["string"]]]},{"name":"args","description":"arguments to pass to the entry creation","type":[[["Array"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":81,"file":"DatabaseManager.js","path":"app/database"}},{"name":"delete","description":"Removes an entry from the table specified","params":[{"name":"slug","description":"the name of the table to remove from","type":[[["string"]]]},{"name":"args","description":"arguments to pass that identify the deletion","type":[[["Array"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":98,"file":"DatabaseManager.js","path":"app/database"}},{"name":"edit","description":"Edits the data for a row in the table specified","params":[{"name":"slug","description":"the name of the table to edit","type":[[["string"]]]},{"name":"property","description":"the name of a specific property to edit","optional":true,"type":[[["string"]]]},{"name":"args","description":"arguments to pass to the editor","type":[[["Array"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":116,"file":"DatabaseManager.js","path":"app/database"}}],"meta":{"line":11,"file":"DatabaseManager.js","path":"app/database"}},{"name":"CommandInteraction","description":"Represents a command interaction, see {@link InteractionClient}.","extends":[[["Interaction"]]],"props":[{"name":"id","description":"The ID of this interaction.","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":23,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"token","description":"The token of this interaction.","readonly":true,"type":[[["string"]]],"meta":{"line":30,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"commandID","description":"The ID of the invoked command.","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":37,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"commandName","description":"The name of the invoked command.","readonly":true,"type":[[["string"]]],"meta":{"line":44,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"options","description":"The options passed to the command.","readonly":true,"type":[[["Object"]]],"meta":{"line":51,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"channel","description":"The channel this interaction was sent in.","readonly":true,"nullable":true,"type":[[["Channel"]]],"meta":{"line":58,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"guild","description":"The guild this interaction was sent in, if any.","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":65,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"member","description":"If this interaction was sent in a guild, the member which sent it.","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":72,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"createdTimestamp","description":"The timestamp the interaction was created at.","readonly":true,"type":[[["number"]]],"meta":{"line":80,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"createdAt","description":"The time the interaction was created at.","readonly":true,"type":[[["Date"]]],"meta":{"line":89,"file":"CommandInteraction.js","path":"app/discord"}}],"methods":[{"name":"acknowledge","description":"Acknowledge this interaction without content.","params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]}],"async":true,"meta":{"line":97,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"reply","description":"Reply to this interaction.","params":[{"name":"content","description":"The content for the message.","nullable":true,"type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide.","nullable":true,"type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"meta":{"line":106,"file":"CommandInteraction.js","path":"app/discord"}}],"meta":{"line":10,"file":"CommandInteraction.js","path":"app/discord"}},{"name":"Composer","description":"Composer for rich Discord embeds.","extends":[[["MessageEmbed"]]],"access":"private","construct":{"name":"Composer","description":"Create a new composer instance.","params":[{"name":"options","description":"the options for the application that instantiated this","type":[[["Object"]]]},{"name":"data","description":"data to pass to discord.js MessageEmbed","optional":true,"type":[[["Object"]]]}]},"methods":[{"name":"setColor","description":"Set the color for the embed.","params":[{"name":"color","description":"one of the colors specified in client options","type":[[["string"]]]}],"returns":[[["self"]]],"meta":{"line":26,"file":"Composer.js","path":"app/discord"}}],"meta":{"line":10,"file":"Composer.js","path":"app/discord"}},{"name":"DiscordManager","description":"Discord manager for the application.","extends":[[["EventManager"]]],"props":[{"name":"driver","description":"The Discord.js API / Websocket Client.","type":[[["Client"]]],"meta":{"line":24,"file":"DiscordManager.js","path":"app/discord"}},{"name":"embeds","description":"The Discord rich embeds.","type":[[["Object"]]],"meta":{"line":34,"file":"DiscordManager.js","path":"app/discord"}},{"name":"messages","description":"The message transformers.","type":[[["Object"]]],"meta":{"line":40,"file":"DiscordManager.js","path":"app/discord"}},{"name":"commands","description":"The commands for the socket, mapped by input.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":46,"file":"DiscordManager.js","path":"app/discord"}},{"name":"applicationCommands","description":"The application commands for the socket, mapped by input.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":52,"file":"DiscordManager.js","path":"app/discord"}},{"name":"events","description":"The events this driver handles","type":[[["Object"]]],"meta":{"line":18,"file":"EventManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"init","description":"Initialize the manager.","async":true,"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":77,"file":"DiscordManager.js","path":"app/discord"}},{"name":"setCache","description":"Cache all managers and music.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":108,"file":"DiscordManager.js","path":"app/discord"}},{"name":"cacheMusic","description":"Cache the music data.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":128,"file":"DiscordManager.js","path":"app/discord"}},{"name":"cacheRooms","description":"Cache room data.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":145,"file":"DiscordManager.js","path":"app/discord"}},{"name":"cache","description":"Query the database and set a given cache.","params":[{"name":"method","description":"the database table to get","type":[[["string"]]]},{"name":"map","description":"the map to store data in","type":[[["Collection"]]]},{"name":"key","description":"a key to use for the new map","type":[[["string"]]]},{"name":"secondaryKey","description":"a dashed key to use for the new map","optional":true,"default":false,"type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":170,"file":"DiscordManager.js","path":"app/discord"}},{"name":"isChannel","description":"Test a channel ID against the setting for the given key","params":[{"name":"id","description":"the id of the channel to test","type":[[["string"]]]},{"name":"key","description":"the channel name in settings to test against","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":183,"file":"DiscordManager.js","path":"app/discord"}},{"name":"isGuild","description":"Test a guild ID against the setting for the given key","params":[{"name":"id","description":"the id of the guild to test","type":[[["string"]]]},{"name":"key","description":"the guild name in settings to test against","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":193,"file":"DiscordManager.js","path":"app/discord"}},{"name":"getChannel","description":"Get the channel for the given slug.","params":[{"name":"slug","description":"the channel name in settings to get","type":[[["string"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":202,"file":"DiscordManager.js","path":"app/discord"}},{"name":"getWebhook","description":"Get the webhook for the given slug.","params":[{"name":"slug","description":"the webhook name in settings to get","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Webhook",">"]]],"nullable":true},"meta":{"line":212,"file":"DiscordManager.js","path":"app/discord"}},{"name":"getContent","description":"Get the transformed content for the given slug.","params":[{"name":"slug","description":"the name of the message to get","type":[[["string"]]]},{"name":"args","description":"arguments to pass to the transformer","type":[[["Array"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":229,"file":"DiscordManager.js","path":"app/discord"}},{"name":"getEmbed","description":"Get the transformed embed for the given slug.","params":[{"name":"slug","description":"the name of the embed to get","type":[[["string"]]]},{"name":"args","description":"arguments to pass to the constructor","type":[[["Array"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":246,"file":"DiscordManager.js","path":"app/discord"}},{"name":"sendMessage","description":"Send a message with the given content and embed.","params":[{"name":"slug","description":"the channel name in settings to get and send to","type":[[["string"]]]},{"name":"content","description":"the content to send","type":[[["string"]],[["RichEmbed"]]]},{"name":"embed","description":"The options to provide","optional":true,"type":[[["MessageOptions"]],[["Attachment"]],[["MessageEmbed"]]]}],"meta":{"line":263,"file":"DiscordManager.js","path":"app/discord"}},{"name":"sendWebhook","description":"Send a webhook with the given content and embed.","params":[{"name":"slug","description":"the webhook name in settings to get and send to","type":[[["string"]]]},{"name":"content","description":"the content to send","type":[[["string"]],[["RichEmbed"]]]},{"name":"embed","description":"The options to provide","optional":true,"type":[[["WebhookMessageOptions"]],[["Attachment"]],[["MessageEmbed"]]]}],"meta":{"line":282,"file":"DiscordManager.js","path":"app/discord"}},{"name":"attach","description":"Attach the event listeners to the socket.","inherits":"EventManager#attach","inherited":true,"meta":{"line":24,"file":"EventManager.js","path":"app/managers"}},{"name":"listen","description":"Listen for a socket event.","inherits":"EventManager#listen","inherited":true,"params":[{"name":"event","description":"the name of the event to listen for","type":[[["string"]]]},{"name":"listener","description":"the function to call on event","type":[[["function"]]]}],"meta":{"line":37,"file":"EventManager.js","path":"app/managers"}}],"meta":{"line":20,"file":"DiscordManager.js","path":"app/discord"}},{"name":"Interaction","description":"Represents an interaction, see {@link InteractionClient}.","extends":[[["Base"]]],"meta":{"line":9,"file":"Interaction.js","path":"app/discord"}},{"name":"HTTPManager","description":"HTTP manager for the application.","extends":[[["EventManager"]]],"props":[{"name":"driver","description":"The HTTP server.","type":[[["httpServer"]]],"meta":{"line":17,"file":"HTTPManager.js","path":"app/http"}},{"name":"requests","description":"The socket request events.","type":[[["Object"]]],"meta":{"line":27,"file":"HTTPManager.js","path":"app/http"}},{"name":"events","description":"The events this driver handles","type":[[["Object"]]],"meta":{"line":18,"file":"EventManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"init","description":"Initialize the manager.","returns":[[["self"]]],"meta":{"line":34,"file":"HTTPManager.js","path":"app/http"}},{"name":"getChannel","description":"Get the channel for the given slug.","params":[{"name":"slug","description":"the username of the stream to get a notification channel for","type":[[["string"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":45,"file":"HTTPManager.js","path":"app/http"}},{"name":"getMessage","description":"Get the message for the given slug.","params":[{"name":"slug","description":"the username of the stream to get a notification message for","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Message",">"]]],"nullable":true},"meta":{"line":59,"file":"HTTPManager.js","path":"app/http"}},{"name":"getRole","description":"Get the role for the given slug.","params":[{"name":"slug","description":"the username of the stream to get a notification role for","type":[[["string"]]]},{"name":"channel","description":"a dicord js cached channel to get role data from","type":[[["Channel"]]]}],"async":true,"returns":[[["Role"]]],"meta":{"line":78,"file":"HTTPManager.js","path":"app/http"}},{"name":"setMessage","description":"Update the messageID for stream stop editing","params":[{"name":"slug","description":"the username of the stream to edit a notification for","type":[[["string"]]]},{"name":"msgID","description":"the original snowflake message id","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":100,"file":"HTTPManager.js","path":"app/http"}},{"name":"attach","description":"Attach the event listeners to the socket.","inherits":"EventManager#attach","inherited":true,"meta":{"line":24,"file":"EventManager.js","path":"app/managers"}},{"name":"listen","description":"Listen for a socket event.","inherits":"EventManager#listen","inherited":true,"params":[{"name":"event","description":"the name of the event to listen for","type":[[["string"]]]},{"name":"listener","description":"the function to call on event","type":[[["function"]]]}],"meta":{"line":37,"file":"EventManager.js","path":"app/managers"}}],"meta":{"line":13,"file":"HTTPManager.js","path":"app/http"}},{"name":"IrcManager","description":"IRC manager for the application.","extends":[[["EventManager"]]],"props":[{"name":"driver","description":"The IRC Client.","type":[[["Client"]]],"meta":{"line":23,"file":"IrcManager.js","path":"app/irc"}},{"name":"jokes","description":"The jokes for the IRC joke command.","type":[[["Array","<"],["Object",">"]]],"meta":{"line":33,"file":"IrcManager.js","path":"app/irc"}},{"name":"filters","description":"The moderation filters for the socket, mapped by ID.","type":[[["Collection","<"],["number",", "],["Object",">"]]],"meta":{"line":39,"file":"IrcManager.js","path":"app/irc"}},{"name":"commands","description":"The commands for the socket, mapped by input.","type":[[["Collection","<"],["string",", "],["Object",">"]]],"meta":{"line":45,"file":"IrcManager.js","path":"app/irc"}},{"name":"limiter","description":"The rate limiter.\nTwitch IRC only allows 100 requests every 30 seconds.","type":[[["RateLimiter"]]],"meta":{"line":52,"file":"IrcManager.js","path":"app/irc"}},{"name":"throttle","description":"The command throttle.","type":[[["Throttle"]]],"meta":{"line":58,"file":"IrcManager.js","path":"app/irc"}},{"name":"filterTypes","description":"The moderation filter types.","type":[[["Object"]]],"meta":{"line":64,"file":"IrcManager.js","path":"app/irc"}},{"name":"events","description":"The events this driver handles","type":[[["Object"]]],"meta":{"line":18,"file":"EventManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"init","description":"Initialize the manager.","async":true,"returns":[[["Promise"]]],"meta":{"line":77,"file":"IrcManager.js","path":"app/irc"}},{"name":"say","description":"Send a message.","params":[{"name":"channel","description":"the twitch channel to post in","type":[[["string"]]]},{"name":"message","description":"the message to post","type":[[["string"]]]}],"meta":{"line":91,"file":"IrcManager.js","path":"app/irc"}},{"name":"delete","description":"Send a command to delete the given message.","params":[{"name":"channel","description":"the twitch channel to delete from","type":[[["string"]]]},{"name":"uuid","description":"the unique id of the message","type":[[["string"]]]},{"name":"callback","description":"called after succesfull deletion","optional":true,"default":null,"type":[[["function"]]]}],"meta":{"line":104,"file":"IrcManager.js","path":"app/irc"}},{"name":"timeout","description":"Time a user out for the given duration.","params":[{"name":"channel","description":"the twitch channel to timeout in","type":[[["string"]]]},{"name":"username","description":"the twitch name to timeout","type":[[["string"]]]},{"name":"duration","description":"the duration of the timeout","type":[[["number"]]]},{"name":"callback","description":"called after succesfull timeout","optional":true,"default":null,"type":[[["function"]]]}],"meta":{"line":125,"file":"IrcManager.js","path":"app/irc"}},{"name":"ban","description":"Ban a user.","params":[{"name":"channel","description":"the twitch channel to ban in","type":[[["string"]]]},{"name":"username","description":"the twitch user to ban","type":[[["string"]]]},{"name":"callback","description":"called after succesfull ban","optional":true,"default":null,"type":[[["function"]]]}],"meta":{"line":145,"file":"IrcManager.js","path":"app/irc"}},{"name":"logModeration","description":"Log a moderation action to the database.","params":[{"name":"values","description":"the extra arguments to log","variable":true,"type":[["*"]]}],"meta":{"line":163,"file":"IrcManager.js","path":"app/irc"}},{"name":"setCache","description":"Cache all moderation filters, commands, and jokes.","returns":[[["Promise"]]],"meta":{"line":171,"file":"IrcManager.js","path":"app/irc"}},{"name":"cacheJokes","description":"Cache the jokes.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":181,"file":"IrcManager.js","path":"app/irc"}},{"name":"cacheFilters","description":"Cache the moderation filters.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":192,"file":"IrcManager.js","path":"app/irc"}},{"name":"cacheCommands","description":"Cache the commands.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":200,"file":"IrcManager.js","path":"app/irc"}},{"name":"cache","description":"Query the database and set a given cache.","params":[{"name":"method","description":"the database table to get","type":[[["string"]]]},{"name":"map","description":"the map to store data in","type":[[["Collection"]]]},{"name":"key","description":"a key to use for the new map","optional":true,"type":[[["string"]]]},{"name":"secondaryKey","description":"a dashed key to use for the new map","optional":true,"default":false,"type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":212,"file":"IrcManager.js","path":"app/irc"}},{"name":"attach","description":"Attach the event listeners to the socket.","inherits":"EventManager#attach","inherited":true,"meta":{"line":24,"file":"EventManager.js","path":"app/managers"}},{"name":"listen","description":"Listen for a socket event.","inherits":"EventManager#listen","inherited":true,"params":[{"name":"event","description":"the name of the event to listen for","type":[[["string"]]]},{"name":"listener","description":"the function to call on event","type":[[["function"]]]}],"meta":{"line":37,"file":"EventManager.js","path":"app/managers"}}],"meta":{"line":18,"file":"IrcManager.js","path":"app/irc"}},{"name":"LogManager","description":"Log manager for the application.","extends":[[["BaseManager"]]],"props":[{"name":"driver","description":"The log driver.","type":[[["Winston"]]],"meta":{"line":40,"file":"LogManager.js","path":"app/log"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"out","description":"Write a message to the log.","params":[{"name":"level","description":"the log level","type":[[["LogLevel"]]]},{"name":"source","description":"the module sourcing this log","type":[[["Module"]]]},{"name":"message","description":"the message to output","type":[[["string"]]]}],"async":true,"meta":{"line":55,"file":"LogManager.js","path":"app/log"}},{"name":"fatal","description":"Exit the process after writing a message to the log.","params":[{"name":"level","description":"the log level","type":[[["LogLevel"]]]},{"name":"source","description":"the module sourcing this log","type":[[["Module"]]]},{"name":"message","description":"the message to output","type":[[["string"]]]}],"async":true,"meta":{"line":69,"file":"LogManager.js","path":"app/log"}},{"name":"webhook","description":"Send a log message via webhook.","params":[{"name":"level","description":"the log level","type":[[["LogLevel"]]]},{"name":"path","description":"the path to the module that this occured in","type":[[["string"]]]},{"name":"message","description":"the message to send","type":[[["string"]]]}],"returns":[[["Promise","<"],["Request",">"]]],"meta":{"line":82,"file":"LogManager.js","path":"app/log"}},{"name":"path","description":"Calculate the path of the given source module.","params":[{"name":"source","description":"the module that made this log","type":[[["Module"]]]}],"returns":[[["string"]]],"meta":{"line":111,"file":"LogManager.js","path":"app/log"}}],"meta":{"line":12,"file":"LogManager.js","path":"app/log"}},{"name":"Logging","description":"Not a real class, a proxy for the {@link LogManager} levels","props":[{"name":"[level]","description":"The level of log to make, one of {@link LogLevel}","readonly":true,"type":[[["Logging"]]],"meta":{"line":24,"file":"LogRouter.js","path":"app/log"}}],"methods":[{"name":"*","description":"Calls the logger at the previously specified level, if none was specified, this is `info`","params":[{"name":"source","description":"the module sourcing this log","type":[[["Module"]]]},{"name":"message","description":"the message to output","type":[[["string"]]]}],"meta":{"line":32,"file":"LogRouter.js","path":"app/log"}}],"meta":{"line":18,"file":"LogRouter.js","path":"app/log"}},{"name":"BaseManager","description":"Manages the data and methods for a given API","abstract":true,"props":[{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}},{"name":"driver","description":"The driver that handles this managers API","readonly":true,"type":[[["Object"]]],"meta":{"line":23,"file":"BaseManager.js","path":"app/managers"}}],"meta":{"line":7,"file":"BaseManager.js","path":"app/managers"}},{"name":"EventManager","description":"Parent implementation for event-driven service classes.","extends":[[["BaseManager"]]],"abstract":true,"props":[{"name":"events","description":"The events this driver handles","type":[[["Object"]]],"meta":{"line":18,"file":"EventManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}},{"name":"driver","description":"The driver that handles this managers API","readonly":true,"type":[[["Object"]]],"meta":{"line":23,"file":"BaseManager.js","path":"app/managers"}}],"methods":[{"name":"attach","description":"Attach the event listeners to the socket.","meta":{"line":24,"file":"EventManager.js","path":"app/managers"}},{"name":"listen","description":"Listen for a socket event.","params":[{"name":"event","description":"the name of the event to listen for","type":[[["string"]]]},{"name":"listener","description":"the function to call on event","type":[[["function"]]]}],"meta":{"line":37,"file":"EventManager.js","path":"app/managers"}}],"meta":{"line":10,"file":"EventManager.js","path":"app/managers"}},{"name":"RequestManager","description":"Parent implementation for request-based service classes.","extends":[[["BaseManager"]]],"abstract":true,"props":[{"name":"api","description":"API request shortcut.","readonly":true,"type":[[["Requester"]]],"meta":{"line":22,"file":"RequestManager.js","path":"app/managers"}},{"name":"app","description":"The application that instantiated this Manager","readonly":true,"type":[[["Application"]]],"meta":{"line":9,"file":"BaseManager.js","path":"app/managers"}},{"name":"options","description":"The options for this API manager","type":[[["Object"]]],"meta":{"line":21,"file":"BaseManager.js","path":"app/managers"}},{"name":"driver","description":"The driver that handles this managers API","readonly":true,"type":[[["Object"]]],"meta":{"line":23,"file":"BaseManager.js","path":"app/managers"}}],"meta":{"line":12,"file":"RequestManager.js","path":"app/managers"}}],"interfaces":[],"typedefs":[{"name":"HTTPMethod","description":"An HTTP fetch method, one of:\n* get\n* patch\n* post\n* put\n* delete","type":[[["string"]]],"meta":{"line":7,"file":"APIRouter.js","path":"app/api"}},{"name":"RequestData","description":"Data passed to any request","type":[[["Object"]]],"params":[{"name":"params","description":"parameters to put in the url","optional":true,"type":[[["Object"]]]},{"name":"data","description":"for put, post, delete, and patch, the data to pass","optional":true,"type":[[["Object"]]]},{"name":"responseType","description":"the expected response type","optional":true,"default":"json","type":[[["string"]]]},{"name":"headers","description":"the headers to send with the response CAUTION: this *can* overide default headers","optional":true,"type":[[["Object"]]]}],"meta":{"line":31,"file":"APIRouter.js","path":"app/api"}},{"name":"IRCCommandEditProperty","description":"The type of properties that can be edited for an IRC command:\n* count\n* output\n* restriction\n* rename","type":[[["string"]]],"meta":{"line":40,"file":"ircCommands.js","path":"app/database/tables"}},{"name":"RoomData","description":"The data for any room:","type":[[["Object"]]],"params":[{"name":"id","description":"the id of the room","type":[[["string"]]]},{"name":"name","description":"the display name of the room","type":[[["string"]]]},{"name":"owner","description":"the snowflake of the room owner","type":[[["string"]]]},{"name":"playerCount","description":"the max number of players allowed","type":[[["number"]]]},{"name":"code","description":"the current code for the room","type":[[["string"]]]},{"name":"players","description":"an array of snowflakes for current players","type":[[["Array","<"],["string",">"]]]},{"name":"waiting","description":"an array of snowflakes for people in the waiting room","type":[[["Array","<"],["string",">"]]]},{"name":"lastChannelID","description":"the snowflake for the channel the last message of this room was sent in","type":[[["string"]]]},{"name":"lastMessageID","description":"the snowflake for the last message this room was sent as","type":[[["string"]]]}],"meta":{"line":38,"file":"rooms.js","path":"app/database/tables"}},{"name":"LogLevel","description":"A level of logging based on the following:\n* fatal - a critical error that ends the application\n* critical - potentially breaking issue\n* error - high priority non-breaking issue\n* warn - non-breaking issue\n* info - general information\n* debug - highly detailed debug information\n* verbose - clutters the log","type":[[["string"]]],"meta":{"line":6,"file":"LogRouter.js","path":"app/log"}}],"externals":[]}